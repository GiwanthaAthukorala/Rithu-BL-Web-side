{
  "openapi": "3.0.2",
  "components": {
    "parameters": {
      "$filter": {
        "name": "$filter",
        "in": "query",
        "description": "\n    An OData filter\n\n    http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter\n  ",
        "schema": {
          "type": "string"
        }
      },
      "$orderby": {
        "name": "$orderby",
        "in": "query",
        "description": "\n    An OData filter\n\n    http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter\n  ",
        "schema": {
          "type": "string"
        }
      },
      "$select": {
        "name": "$select",
        "in": "query",
        "description": "\n    The OData `$select` query option.\n\n    This is a comma separated string of fields to select. Only filtering flat properties is\n    supported.\n\n    http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect\n  ",
        "schema": {
          "type": "string"
        }
      },
      "$team": {
        "name": "$team",
        "in": "query",
        "description": "A custom filter for filtering the query by teams the requesting user is a member of.",
        "schema": {
          "enum": [
            "member",
            "manager"
          ]
        }
      },
      "$top": {
        "name": "$top",
        "in": "query",
        "description": "Limit the number of entities returned.",
        "schema": {
          "type": "string"
        }
      },
      "appId": {
        "name": "appId",
        "in": "path",
        "description": "The ID of the app on which to perform an operation",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/App/properties/id"
        }
      },
      "appOAuth2SecretId": {
        "name": "appOAuth2SecretId",
        "in": "path",
        "description": "The ID of the app OAuth2 secret on which to perform an operation",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/AppOAuth2Secret/properties/id"
        }
      },
      "appSamlSecretId": {
        "name": "appSamlSecretId",
        "in": "path",
        "description": "The ID of the app SAML secret on which to perform an operation",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "assetId": {
        "name": "assetId",
        "in": "path",
        "description": "The ID of the asset on which to perform an operation",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Asset/properties/id"
        }
      },
      "blockId": {
        "name": "blockId",
        "in": "path",
        "description": "The ID of the block on which to perform an operation, but without the organization scope.",
        "required": true,
        "schema": {
          "type": "string",
          "pattern": "^([\\da-z](?:(?!.*--)[\\da-z-]*[\\da-z])?)$"
        }
      },
      "blockVersion": {
        "name": "blockVersion",
        "in": "path",
        "description": "The version of the block on which to perform an operation.",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/BlockVersion/properties/version"
        }
      },
      "endpoint": {
        "name": "endpoint",
        "in": "query",
        "description": "The URL of the endpoint associated with the subscription.",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uri"
        }
      },
      "language": {
        "name": "language",
        "in": "path",
        "description": "The language on which to perform an operation",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "organizationId": {
        "name": "organizationId",
        "in": "path",
        "description": "The ID of the organization on which to perform an operation",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Organization/properties/id"
        }
      },
      "resourceId": {
        "name": "resourceId",
        "in": "path",
        "description": "The ID of the resource on which to perform an operation",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Resource/properties/id"
        }
      },
      "resourceType": {
        "name": "resourceType",
        "in": "path",
        "description": "The type of the resource on which to perform an operation",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "screenshotId": {
        "name": "screenshotId",
        "in": "path",
        "description": "The ID of the app an app screenshot",
        "required": true,
        "schema": {
          "type": "number"
        }
      },
      "view": {
        "name": "view",
        "in": "query",
        "description": "The view of the resource to fetch.",
        "schema": {
          "type": "string"
        }
      }
    },
    "requestBodies": {
      "oauth2Consent": {
        "description": "The OAuth2 client credentials",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "appId",
                "redirectUri",
                "scope"
              ],
              "description": "A representation of a userâ€™s OAuth2 consent when logging in to an app.",
              "additionalProperties": false,
              "properties": {
                "appId": {
                  "type": "number",
                  "description": "The app ID to manage the OAuth2 consent for"
                },
                "redirectUri": {
                  "type": "string",
                  "format": "uri",
                  "description": "The URI to redirect the user back to."
                },
                "scope": {
                  "type": "string",
                  "description": "The OAuth2 scope requested by the app."
                }
              }
            }
          }
        }
      },
      "resource": {
        "description": "A resource definition",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Resource"
            }
          },
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "required": [
                "resource"
              ],
              "description": "A `multipart/form-data` representation of a resource.",
              "additionalProperties": false,
              "properties": {
                "resource": {
                  "$ref": "#/components/schemas/Resource"
                },
                "assets": {
                  "type": "array",
                  "description": "A list of assets that should be linked to the resource.",
                  "items": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        }
      },
      "user": {
        "description": "A user profile",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/User"
            }
          }
        }
      }
    },
    "responses": {
      "default": {
        "description": "The default error response.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "app": {
        "description": "An app response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/App"
            }
          }
        }
      },
      "blockVersion": {
        "description": "A block definition response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BlockVersion"
            }
          }
        }
      },
      "invite": {
        "description": "An invite response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Organization"
            }
          }
        }
      },
      "oauth2AuthorizationCode": {
        "description": "An OAuth2 authorization code.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/App"
            }
          }
        }
      },
      "organization": {
        "description": "An organization response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Organization"
            }
          }
        }
      },
      "resource": {
        "description": "A resource response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Resource"
            }
          },
          "text/csv": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "subscriptions": {
        "description": "A subscription response.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "description": "A mapping of resources names to resource subscriptions.",
              "additionalProperties": {
                "$ref": "#/components/schemas/ResourceSubscription"
              }
            }
          }
        }
      }
    },
    "schemas": {
      "ActionDefinition": {
        "allOf": [
          {
            "type": "object",
            "description": "The base properties of an action definition.",
            "additionalProperties": true,
            "properties": {
              "remapBefore": {
                "$ref": "#/components/schemas/RemapperDefinition",
                "description": "This may be used to remap data before it is passed into the action function."
              },
              "remapAfter": {
                "$ref": "#/components/schemas/RemapperDefinition",
                "description": "This may be used to remap data after it is passed into the action function."
              },
              "onSuccess": {
                "$ref": "#/components/schemas/ActionDefinition",
                "description": "Another action that is dispatched when the action has been dispatched successfully."
              },
              "onError": {
                "$ref": "#/components/schemas/ActionDefinition",
                "description": "Another action that is dispatched when the action has failed to dispatch successfully."
              }
            }
          },
          {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AnalyticsActionDefinition"
              },
              {
                "$ref": "#/components/schemas/ConditionActionDefinition"
              },
              {
                "$ref": "#/components/schemas/DialogActionDefinition"
              },
              {
                "$ref": "#/components/schemas/DialogErrorActionDefinition"
              },
              {
                "$ref": "#/components/schemas/DialogOkActionDefinition"
              },
              {
                "$ref": "#/components/schemas/DownloadActionDefinition"
              },
              {
                "$ref": "#/components/schemas/EmailActionDefinition"
              },
              {
                "$ref": "#/components/schemas/EventActionDefinition"
              },
              {
                "$ref": "#/components/schemas/FlowBackActionDefinition"
              },
              {
                "$ref": "#/components/schemas/FlowFinishActionDefinition"
              },
              {
                "$ref": "#/components/schemas/FlowNextActionDefinition"
              },
              {
                "$ref": "#/components/schemas/FlowToActionDefinition"
              },
              {
                "$ref": "#/components/schemas/LinkActionDefinition"
              },
              {
                "$ref": "#/components/schemas/LinkBackActionDefinition"
              },
              {
                "$ref": "#/components/schemas/LinkNextActionDefinition"
              },
              {
                "$ref": "#/components/schemas/LogActionDefinition"
              },
              {
                "$ref": "#/components/schemas/MessageActionDefinition"
              },
              {
                "$ref": "#/components/schemas/NoopActionDefinition"
              },
              {
                "$ref": "#/components/schemas/RequestActionDefinition"
              },
              {
                "$ref": "#/components/schemas/ResourceCountActionDefinition"
              },
              {
                "$ref": "#/components/schemas/ResourceCreateActionDefinition"
              },
              {
                "$ref": "#/components/schemas/ResourceDeleteActionDefinition"
              },
              {
                "$ref": "#/components/schemas/ResourceGetActionDefinition"
              },
              {
                "$ref": "#/components/schemas/ResourceQueryActionDefinition"
              },
              {
                "$ref": "#/components/schemas/ResourceSubscriptionStatusActionDefinition"
              },
              {
                "$ref": "#/components/schemas/ResourceSubscriptionSubscribeActionDefinition"
              },
              {
                "$ref": "#/components/schemas/ResourceSubscriptionToggleActionDefinition"
              },
              {
                "$ref": "#/components/schemas/ResourceSubscriptionUnsubscribeActionDefinition"
              },
              {
                "$ref": "#/components/schemas/ResourceUpdateActionDefinition"
              },
              {
                "$ref": "#/components/schemas/ShareActionDefinition"
              },
              {
                "$ref": "#/components/schemas/ShareActionDefinition"
              },
              {
                "$ref": "#/components/schemas/StaticActionDefinition"
              },
              {
                "$ref": "#/components/schemas/StorageReadActionDefinition"
              },
              {
                "$ref": "#/components/schemas/StorageReadActionDefinition"
              },
              {
                "$ref": "#/components/schemas/StorageWriteActionDefinition"
              },
              {
                "$ref": "#/components/schemas/StorageWriteActionDefinition"
              },
              {
                "$ref": "#/components/schemas/TeamInviteActionDefinition"
              },
              {
                "$ref": "#/components/schemas/TeamJoinActionDefinition"
              },
              {
                "$ref": "#/components/schemas/TeamListActionDefinition"
              },
              {
                "$ref": "#/components/schemas/ThrowActionDefinition"
              },
              {
                "$ref": "#/components/schemas/UserLoginActionDefinition"
              },
              {
                "$ref": "#/components/schemas/UserRegisterActionDefinition"
              },
              {
                "$ref": "#/components/schemas/UserUpdateActionDefinition"
              }
            ]
          }
        ]
      },
      "AnalyticsActionDefinition": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "target"
        ],
        "properties": {
          "type": {
            "enum": [
              "analytics"
            ],
            "description": "This action sends a Google Analytics event.\n\nIt returns the input data.\n"
          },
          "target": {
            "type": "string",
            "description": "The name of the analytics target event to send."
          },
          "config": {
            "$ref": "#/components/schemas/RemapperDefinition",
            "description": "A remapper whose result will be sent to Google Analytics as additional context"
          },
          "remapBefore": {},
          "remapAfter": {},
          "onSuccess": {},
          "onError": {}
        }
      },
      "App": {
        "type": "object",
        "description": "An app definition defines what an app will look like.",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "number",
            "minimum": 0,
            "readOnly": true,
            "description": "The unique identifier for the app.\n\nThis value will be generated automatically by the API.\n"
          },
          "OrganizationId": {
            "$ref": "#/components/schemas/Organization/properties/id"
          },
          "path": {
            "type": "string",
            "minLength": 1,
            "maxLength": 30,
            "pattern": "^([\\da-z](?:(?!.*--)[\\da-z-]*[\\da-z])?)$",
            "description": "The URL path segment on which this app is reachable.\n\nThis may only contain lower case characters, numbers, and hyphens. By default this is a\nnormalized version of the app name.\n"
          },
          "domain": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 0
              },
              {
                "type": "string",
                "format": "hostname"
              }
            ],
            "description": "The domain name on which this app should be served.\n\nIf this is unspecified, the app will be served from the path on the domain of the server\n`HOSTNAME` variable.\n"
          },
          "visibility": {
            "description": "Determine the app visibility of the app in the Appsemble app store.\n\nThis doesnâ€™t affect whether or not the app can be accessed on its own domain.\n\n- **public**: The app is publicly listed in the Appsemble app store.\n- **unlisted**: The app store page can be accessed, but the app isnâ€™t listed publicly in the\n  Appsemble app store.\n- **private**: The app is only visible to people who are part of the organization.\n",
            "default": "unlisted",
            "enum": [
              "public",
              "unlisted",
              "private"
            ]
          },
          "showAppDefinition": {
            "type": "boolean",
            "description": "Whether or not people who have access to the app may see the app definition."
          },
          "locked": {
            "type": "boolean",
            "description": "Determines whether this app should be locked from being updated.\n\nThis must be set to `false` before any other changes can be made to an app.\n"
          },
          "template": {
            "type": "boolean",
            "description": "Determines whether this app should be included when fetching for templates."
          },
          "longDescription": {
            "type": "string",
            "description": "\nA long description for the app.\n\nThe long desciption will be rendered on the app details page. Markdown content is supported.\n"
          },
          "definition": {
            "$ref": "#/components/schemas/AppDefinition"
          },
          "screenshotUrls": {
            "type": "array",
            "description": "A list of URLs referencing app screenshots",
            "items": {
              "type": "string"
            }
          },
          "googleAnalyticsID": {
            "type": "string",
            "description": "If this is specified, Google analytics will be applied to the app",
            "pattern": "^(|UA-\\d{4,10}-\\d{1,4}|G-[\\dA-Z]{4,})$"
          },
          "sentryDsn": {
            "type": "string",
            "description": "The Sentry DSN to use for this app.\n\nIf this is specified, the given Sentry DSN will be used for error tracking. Apps without a custom\ndomain fall back to use the Appsemble server Sentry DSN.\n",
            "format": "url"
          },
          "sentryEnvironment": {
            "type": "string",
            "description": "The name that should be used as the sentry environment.\n\n  This is only applied when `sentryDsn` is specified."
          }
        }
      },
      "AppAccount": {
        "type": "object",
        "description": "An user account connected to an app",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "The name as it is available in the app."
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The email address as it is available in the app."
          },
          "email_verified": {
            "type": "boolean",
            "description": "Whether this email address has been verified."
          },
          "role": {
            "type": "string",
            "description": "The role of the user within the app"
          },
          "app": {
            "$ref": "#/components/schemas/AppDefinition"
          },
          "sso": {
            "type": "array",
            "description": "The single sign on configurations which link the user to an external account.",
            "items": {
              "$ref": "#/components/schemas/SSOConfiguration"
            }
          },
          "avatar": {
            "type": "string",
            "format": "url",
            "description": "The URL of the avatar of the member."
          }
        }
      },
      "AppDefinition": {
        "type": "object",
        "required": [
          "name",
          "defaultPage",
          "pages"
        ],
        "additionalProperties": false,
        "description": "An app definition describes what an Appsemble app looks like.",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 30,
            "description": "The human readable name of the app.\n\nThis will be displayed for example on the home screen or in the browser tab.\n"
          },
          "roles": {
            "type": "array",
            "description": "The list of roles that are allowed to view this app.\n\nThis list is used as the default roles for the roles property on pages and blocks, which can be\noverridden by defining them for a specific page or block. Note that these roles must be defined in\n`security.roles`.\n",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "type": "string",
            "maxLength": 80,
            "description": "A short description describing the app.\n\nThis will be displayed on the app store.\n"
          },
          "layout": {
            "$ref": "#/components/schemas/AppLayoutDefinition",
            "description": "Properties related to the layout of the app."
          },
          "notifications": {
            "enum": [
              "opt-in",
              "startup"
            ],
            "description": "The strategy to use for apps to subscribe to push notifications.\n\nIf specified, push notifications can be sent to subscribed users via the _Notifications_ tab in the\napp details page in Appsemble Studio. Setting this to `opt-in` allows for users to opt into\nreceiving push notifications by pressing the subscribe button in the App settings page. Setting this\nto `startup` will cause Appsemble to immediately request for the permission upon opening the app.\n\n> **Note**: Setting `notifications` to `startup` is not recommended, due to its invasive nature.\n"
          },
          "defaultPage": {
            "type": "string",
            "description": "The name of the page that should be displayed when the app is initially loaded.\n\nThis **must** match the name of a page defined for the app.\n"
          },
          "defaultLanguage": {
            "type": "string",
            "default": "en",
            "minLength": 2,
            "description": "The default language for the app."
          },
          "resources": {
            "type": "object",
            "description": "Resources define how Appsemble can store data for an app.\n\nThe most basic resource has a `schema` property and defines the minimal security rules.\n",
            "additionalProperties": {
              "description": "A single resource definition.",
              "$ref": "#/components/schemas/ResourceDefinition"
            }
          },
          "security": {
            "$ref": "#/components/schemas/SecurityDefinition",
            "description": "Role definitions that may be used by the app."
          },
          "pages": {
            "type": "array",
            "minItems": 1,
            "description": "The pages of the app.",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/PageDefinition"
                },
                {
                  "$ref": "#/components/schemas/TabsPageDefinition"
                },
                {
                  "$ref": "#/components/schemas/FlowPageDefinition"
                }
              ]
            }
          },
          "theme": {
            "$ref": "#/components/schemas/Theme"
          },
          "cron": {
            "type": "object",
            "minProperties": 1,
            "description": "A list of cron jobs that are associated with this app.",
            "additionalProperties": {
              "$ref": "#/components/schemas/CronDefinition"
            }
          },
          "anchors": {
            "type": "array",
            "minItems": 1,
            "description": "Helper property that can be used to store YAML anchors.",
            "items": {}
          }
        }
      },
      "AppLayoutDefinition": {
        "type": "object",
        "description": "The layout definition allows you to tweak several layout elements of the app.",
        "additionalProperties": false,
        "minProperties": 1,
        "properties": {
          "login": {
            "enum": [
              "navbar",
              "navigation",
              "hidden"
            ],
            "default": "navbar",
            "description": "The location of the login button."
          },
          "settings": {
            "enum": [
              "navbar",
              "navigation",
              "hidden"
            ],
            "default": "navbar",
            "description": "The location of the settings button.\n\nIf set to `navigation`, it will only be visible if `login` is also visible in `navigation`.\n"
          },
          "feedback": {
            "enum": [
              "navbar",
              "navigation",
              "hidden"
            ],
            "default": "navigation",
            "description": "The location of the feedback button.\n\nIf set to `navigation`, it will only be visible if `login` is also visible in `navigation`.\n"
          },
          "navigation": {
            "enum": [
              "bottom",
              "left-menu",
              "hidden"
            ],
            "default": "left-menu",
            "description": "The navigation type to use.\n\nIf this is omitted, a collapsable side navigation menu will be rendered on the left.\n"
          }
        }
      },
      "AppMessages": {
        "type": "object",
        "description": "The response object of an messages create call.",
        "required": [
          "language",
          "messages"
        ],
        "additionalProperties": false,
        "properties": {
          "language": {
            "type": "string",
            "description": "The language the messages represent."
          },
          "messages": {
            "$ref": "#/components/schemas/AppsembleMessages"
          },
          "force": {
            "type": "boolean",
            "writeOnly": true,
            "description": "If this is true, the app lock is ignored."
          }
        }
      },
      "AppOAuth2Secret": {
        "type": "object",
        "description": "Settings for login in apps using third party OAuth2 providers",
        "required": [
          "authorizationUrl",
          "clientId",
          "clientSecret",
          "icon",
          "name",
          "scope",
          "tokenUrl"
        ],
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "number",
            "description": "An autogenerated ID",
            "readOnly": true
          },
          "authorizationUrl": {
            "type": "string",
            "format": "uri",
            "description": "The OAuth2 redirect URL."
          },
          "tokenUrl": {
            "type": "string",
            "format": "uri",
            "description": "The URL to request access tokens from."
          },
          "clientId": {
            "type": "string",
            "description": "The public client id which identifies Appsemble to the authorization server."
          },
          "clientSecret": {
            "type": "string",
            "description": "The OAuth2 client secret."
          },
          "icon": {
            "type": "string",
            "description": "A Font Awesome icon which represents the OAuth2 provider."
          },
          "name": {
            "type": "string",
            "description": "A display name which represents the OAuth2 provider."
          },
          "scope": {
            "type": "string",
            "description": "The login scope that will be requested from the authorization server."
          },
          "userInfoUrl": {
            "type": "string",
            "format": "uri",
            "description": "The URL to request user info from"
          },
          "remapper": {
            "type": "array",
            "description": "A remapper to apply on retrieved user information from the user info endpoint.",
            "items": {}
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "When the secret was created originally."
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "description": "When the secret was last updated."
          }
        }
      },
      "AppsembleMessages": {
        "type": "object",
        "description": "A mapping of the messages for this language",
        "additionalProperties": false,
        "properties": {
          "core": {
            "type": "object",
            "description": "Translations for the core of the app.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "app": {
            "type": "object",
            "description": "Translations for global block messages and meta properties of the app.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "blocks": {
            "type": "object",
            "description": "Translations for the core of the app.",
            "additionalProperties": {
              "type": "object",
              "description": "The name of the block type.",
              "pattern": "^@([\\da-z](?:(?!.*--)[\\da-z-]*[\\da-z])?)/([\\da-z](?:(?!.*--)[\\da-z-]*[\\da-z])?)$",
              "additionalProperties": {
                "type": "object",
                "description": "The version of the block.",
                "pattern": "^\\d+\\.\\d+\\.\\d+$",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          },
          "messageIds": {
            "type": "object",
            "description": "A list of custom message IDs used by the app.",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "Asset": {
        "type": "object",
        "description": "The response object of an asset create call.",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "description": "The unique identifier for the asset.",
            "pattern": "^([\\da-z](?:(?!.*--)[\\da-z-]*[\\da-z])?)$"
          },
          "mime": {
            "type": "string",
            "readOnly": true,
            "description": "The IANA MIME type of the asset."
          },
          "filename": {
            "type": "string",
            "readOnly": true,
            "description": "The filename of the asset."
          },
          "name": {
            "type": "string",
            "pattern": "^([\\da-z](?:(?!.*--)[\\da-z-]*[\\da-z])?)$",
            "description": "The given name of the asset. Assets may be referenced by their name or ID in the API."
          }
        }
      },
      "BlockDefinition": {
        "type": "object",
        "description": "A block that is displayed on a page.",
        "required": [
          "type",
          "version"
        ],
        "additionalProperties": false,
        "properties": {
          "theme": {
            "$ref": "#/components/schemas/Theme"
          },
          "type": {
            "type": "string",
            "pattern": "^(@([\\da-z](?:(?!.*--)[\\da-z-]*[\\da-z])?)/)?([\\da-z](?:(?!.*--)[\\da-z-]*[\\da-z])?)$",
            "description": "The type of the block.\n\nA block type follows the format `@organization/name`. If the organization is _appsemble_, it may\nbe omitted.\n\nSome examples:\n\n- `form`\n- `@amsterdam/splash`\n"
          },
          "version": {
            "type": "string",
            "pattern": "^\\d+\\.\\d+\\.\\d+$",
            "description": "The version of the block to use.\n\nSince blocks may change over time, a version must be specified in order to ensure that the block\nwill remain the same until it is manually updated.\n"
          },
          "layout": {
            "description": "An override of the blockâ€™s default.",
            "enum": [
              "float",
              "grow",
              "static"
            ]
          },
          "header": {
            "$ref": "#/components/schemas/RemapperDefinition",
            "description": "An optional header to render above the block."
          },
          "roles": {
            "type": "array",
            "description": "The list of roles that are allowed to view this block.\n\nIf a user does not have the right role, the block is not rendered.\n",
            "items": {
              "type": "string"
            }
          },
          "position": {
            "description": "For floating blocks this propert defines where the block should float.",
            "default": "bottom right",
            "enum": [
              "top left",
              "top",
              "top right",
              "left",
              "right",
              "bottom left",
              "bottom",
              "bottom right"
            ]
          },
          "parameters": {
            "type": "object",
            "description": "A free form mapping of named paramters.\n\nThe exact meaning of the parameters depends on the block type.\n",
            "additionalProperties": true
          },
          "actions": {
            "type": "object",
            "description": "A mapping of actions that can be fired by the block to action handlers.",
            "additionalProperties": {
              "$ref": "#/components/schemas/ActionDefinition"
            }
          },
          "events": {
            "$ref": "#/components/schemas/EventsDefinition"
          }
        }
      },
      "BlockVersion": {
        "type": "object",
        "description": "A version of a block definition\n\nBlock versions canâ€™t be updated or deleted. This ensures apps that use a block version can never\nbe broken by alterations of block definitions.\n",
        "required": [
          "name",
          "version",
          "files"
        ],
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "readOnly": true,
            "description": "The name of a block.\n\nThis uses the same form as scoped npm packages. For example, `@appsemble/form`.\n",
            "pattern": "^@([\\da-z](?:(?!.*--)[\\da-z-]*[\\da-z])?)/([\\da-z](?:(?!.*--)[\\da-z-]*[\\da-z])?)$"
          },
          "description": {
            "type": "string",
            "description": "The description of the block.",
            "maxLength": 160
          },
          "longDescription": {
            "type": "string",
            "description": "The long description of the block."
          },
          "icon": {
            "type": "string",
            "format": "binary",
            "description": "An icon to represent the block in Appsemble studio."
          },
          "iconUrl": {
            "type": "string",
            "format": "uri",
            "description": "The relative URL on which the icon is served",
            "readOnly": true
          },
          "version": {
            "type": "string",
            "pattern": "^\\d+\\.\\d+\\.\\d+$",
            "description": "A [semver](https://semver.org) representation of the block version."
          },
          "visibility": {
            "enum": [
              "public",
              "unlisted"
            ],
            "default": "public",
            "description": "Whether the block should be listed publicly for users who arenâ€™t part of the blockâ€™s organization.\n\n- **`public`**: The block is visible for everyone.\n- **`unlisted`**: The block will only be visible if the user is logged in and is part of the blockâ€™s organization."
          },
          "layout": {
            "description": "How the block will be displayed on the screen.\n\n- **`float`**: The block will float somewhere on the screen.\n- **`grow`**: The block will be positioned in the main page. It will grow to fill up remaining\n  space on the page.\n- **`static`**: The block will be positioned in the main page. It will take up a fixed amount of\n  space.\n- **`hidden`**: The block will not be rendered at all.\n",
            "default": "grow",
            "enum": [
              "float",
              "grow",
              "static",
              "hidden"
            ]
          },
          "actions": {
            "type": "object",
            "description": "An object which describes the actions a block can trigger.\n\nThis will be used to validate app definitions.\n",
            "additionalProperties": true
          },
          "parameters": {
            "$ref": "#/components/schemas/JSONSchemaRoot",
            "description": "A draft 7 JSON schema to use for block parameter validation.\n\nIf the parameters of a block definition donâ€™t conform to this schema, the app definition will be\nconsidered invalid.\n"
          },
          "events": {
            "type": "object",
            "description": "An object describing the names of the events the block can listen and emit to.",
            "additionalProperties": false,
            "properties": {
              "listen": {
                "type": "object",
                "description": "A mapping of events this block may listen on",
                "additionalProperties": {
                  "description": "A mapping of events this block may listen on",
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "description": {
                      "type": "string"
                    }
                  }
                }
              },
              "emit": {
                "type": "object",
                "description": "A mapping of events this block may emit",
                "additionalProperties": {
                  "description": "A mapping of events this block may emit",
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "description": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "resources": {
            "type": "object",
            "description": "deprecated",
            "additionalProperties": true
          },
          "messages": {
            "type": "object",
            "description": "The translated messages for the block.\n\nEnglish (`en`) messages are required.\n",
            "required": [
              "en"
            ],
            "properties": {
              "en": {
                "type": "object",
                "description": "A mapping of language IDs to their English translation",
                "additionalProperties": {
                  "type": "string",
                  "description": "The default translations to use.",
                  "minLength": 1
                }
              }
            },
            "additionalProperties": {
              "type": "object",
              "description": "A mapping of language IDs to their internationalized translation",
              "additionalProperties": {
                "type": "string",
                "description": "The translated messages for this language."
              }
            }
          },
          "files": {
            "type": "array",
            "description": "A list of file assets that belong to the app version.",
            "minLength": 1,
            "items": {
              "type": "string",
              "format": "binary"
            }
          },
          "examples": {
            "type": "array",
            "description": "A list of exmples how the block can be used within an app definition.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ConditionActionDefinition": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "if"
        ],
        "properties": {
          "type": {
            "enum": [
              "condition"
            ],
            "description": "Run another action if a certain contition is met."
          },
          "if": {
            "$ref": "#/components/schemas/RemapperDefinition",
            "description": "A remapper to determine the condition to check.\n\nIf this yields a truthy value, the `then` action is called. Otherwise the `else` action is\ncalled.\n"
          },
          "then": {
            "description": "This action is called if the `if` remapper yields a truthy value.",
            "$ref": "#/components/schemas/ActionDefinition"
          },
          "else": {
            "description": "This action is called if the `if` remapper yields a falsy value.",
            "$ref": "#/components/schemas/ActionDefinition"
          },
          "remapBefore": {},
          "remapAfter": {},
          "onSuccess": {},
          "onError": {}
        }
      },
      "CronDefinition": {
        "type": "object",
        "required": [
          "schedule"
        ],
        "description": "A cron definition defines tasks that Appsemble will run periodically for the app.",
        "additionalProperties": false,
        "properties": {
          "schedule": {
            "description": "A crontab string to define when the action should be run.\n\nSee [Crontab guru](https://crontab.guru) for details\n",
            "type": "string"
          },
          "action": {
            "description": "The action to run when the cronjob is triggered.",
            "$ref": "#/components/schemas/ActionDefinition"
          }
        }
      },
      "CustomFontDefinition": {
        "type": "object",
        "description": "A custom font definition.",
        "additionalProperties": false,
        "required": [
          "source",
          "family"
        ],
        "properties": {
          "source": {
            "description": "Use a custom font.",
            "enum": [
              "custom"
            ]
          },
          "family": {
            "type": "string",
            "description": "The font family to use in the app.\n\nMake sure the font is available using custom CSS.\n"
          }
        }
      },
      "DialogActionDefinition": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "blocks"
        ],
        "properties": {
          "type": {
            "enum": [
              "dialog"
            ],
            "description": "This action opens a pop-up dialog that can be used to seamlessly transition to a new set of blocks temporarily.\n\nDialogs can be closed by calling the [`dialog.ok`](#DialogOkActionDefinition) or\n[`dialog.error`](#DialogErrorActionDefinition). Users can still manually close dialogs, which\nshould be supported by the app.\n"
          },
          "title": {
            "description": "An optional title to set in the dialog header.",
            "$ref": "#/components/schemas/RemapperDefinition"
          },
          "closable": {
            "type": "boolean",
            "default": true,
            "description": "Whether users are allowed to close the dialog by clicking outside of it or on the close button."
          },
          "fullscreen": {
            "type": "boolean",
            "default": false,
            "description": "Whether the dialog should be displayed full screen as if itâ€™s a new page, or as a pop-up."
          },
          "blocks": {
            "type": "array",
            "description": "A list of blocks to display in the dialog.",
            "items": {
              "$ref": "#/components/schemas/BlockDefinition"
            }
          },
          "remapBefore": {},
          "remapAfter": {},
          "onSuccess": {},
          "onError": {}
        }
      },
      "DialogErrorActionDefinition": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "enum": [
              "dialog.error"
            ],
            "description": "Close an open dialog.\n\nThe dialog action that opened the dialog will be rejected with the data passed to this action.\n"
          },
          "remapBefore": {},
          "remapAfter": {},
          "onSuccess": {},
          "onError": {}
        }
      },
      "DialogOkActionDefinition": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "enum": [
              "dialog.ok"
            ],
            "description": "Close an open dialog.\n\nThe dialog action that opened the dialog will be rejected with the data passed to this action.\n"
          },
          "remapBefore": {},
          "remapAfter": {},
          "onSuccess": {},
          "onError": {}
        }
      },
      "DownloadActionDefinition": {
        "type": "object",
        "required": [
          "type",
          "filename"
        ],
        "additionalProperties": false,
        "properties": {
          "type": {
            "enum": [
              "download"
            ],
            "description": "Download the data as a file."
          },
          "filename": {
            "type": "string",
            "description": "The filename to save the file as. This must include a file extension.",
            "pattern": "\\."
          },
          "remapBefore": {},
          "remapAfter": {},
          "onSuccess": {},
          "onError": {}
        }
      },
      "EmailActionDefinition": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "subject",
          "body"
        ],
        "properties": {
          "type": {
            "enum": [
              "email"
            ],
            "description": "The email action can be used to send emails via the Appsemble server.\n\nIf `to`, `cc`, and `bcc` all end up being empty, no emails will be sent but the action will still continue as normal.\n"
          },
          "to": {
            "$ref": "#/components/schemas/RemapperDefinition",
            "description": "The address the email should be sent to. Can be either in the format of `test@example.com`, or `John Doe <test@example.com>`"
          },
          "from": {
            "$ref": "#/components/schemas/RemapperDefinition",
            "description": "The name of the sender of the email."
          },
          "cc": {
            "$ref": "#/components/schemas/RemapperDefinition",
            "description": "The list of additional email addresses email should be sent to. Uses the same format as `to`. Every email address in the CC is visible to all recipients."
          },
          "bcc": {
            "$ref": "#/components/schemas/RemapperDefinition",
            "description": "The list of additional email addresses email should be sent to. Uses the same format as `to`. Email addresses in the BCC are hidden from other recipients."
          },
          "subject": {
            "$ref": "#/components/schemas/RemapperDefinition",
            "description": "The subject of the email."
          },
          "body": {
            "$ref": "#/components/schemas/RemapperDefinition",
            "description": "The body of the email. The content of the body is converted to HTML using the Markdown syntax."
          },
          "attachments": {
            "$ref": "#/components/schemas/RemapperDefinition",
            "description": "The attachments to include in the email.\n\nThe remapper must resolve to an object containing the following properties:\n\n- `target`: The asset ID or link to download contents from to add as an attachment. This is mutually exclusive with `content`.\n- `content`: The raw content to include as the file content. This is mutually exclusive with `target`.\n- `filename`: The filename to include the attachment as.\n- `accept` If the target is a URL, this will be set as the HTTP `Accept` header when downloading the file.\n\nIf the attachment is a string, it will be treated as the target."
          },
          "remapBefore": {},
          "remapAfter": {},
          "onSuccess": {},
          "onError": {}
        }
      },
      "Error": {
        "type": "object",
        "description": "The generic error object returned by any expected API errors.",
        "readOnly": true,
        "additionalProperties": false,
        "properties": {
          "statusCode": {
            "type": "number",
            "description": "Matches the HTTP response status code.",
            "example": 404
          },
          "error": {
            "type": "string",
            "description": "Matches the HTTP response status description.",
            "example": "Not Found"
          },
          "message": {
            "type": "string",
            "description": "A message describing the error.",
            "example": "Entity not found"
          }
        }
      },
      "EventActionDefinition": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "event"
        ],
        "properties": {
          "type": {
            "enum": [
              "event"
            ],
            "description": "This action allows for other blocks to emit data upon triggering the action.\n\nThis can be used to make blocks interact with each other, such as triggering the `data-loader`\nblock to refresh itself by sending an event action that matches the name of what the block is\nlistening to.\n"
          },
          "event": {
            "type": "string",
            "description": "The name of the event to emit."
          },
          "waitFor": {
            "type": "string",
            "description": "If specified, the action will wait for this event to have been emitted and respond with its data."
          },
          "remapBefore": {},
          "remapAfter": {},
          "onSuccess": {},
          "onError": {}
        }
      },
      "EventsDefinition": {
        "type": "object",
        "description": "An object describing the names of the events the block can listen and emit to.",
        "additionalProperties": false,
        "minProperties": 1,
        "properties": {
          "listen": {
            "type": "object",
            "description": "This property defines the events this block will listen on.\n\nThe key is the name of the event will listen on. The value is a user defined event name which should\nmatch the name of an emitted event on the same page.\n",
            "minProperties": 1,
            "additionalProperties": {
              "type": "string"
            }
          },
          "emit": {
            "type": "object",
            "description": "This property defines the events this block will emit.\n\nThe key is the name of the event will emit. The value is a user defined event name which should\nmatch the name of a event on the same page thatâ€™s being listened on.\n",
            "minProperties": 1,
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "FlowBackActionDefinition": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "enum": [
              "flow.back"
            ],
            "description": "On [flow pages](#flow-page-definition-sub-pages), return to the previous page if\nit is present. If this is called on the first page, nothing happens.\n"
          },
          "remapBefore": {},
          "remapAfter": {},
          "onSuccess": {},
          "onError": {}
        }
      },
      "FlowFinishActionDefinition": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "enum": [
              "flow.finish"
            ],
            "description": "On [flow pages](#flow-page-definition-sub-pages), triggers the\n[`onFlowFinish`](#flow-page-actions-definition-on-flow-finish) action on the page.\n"
          },
          "remapBefore": {},
          "remapAfter": {},
          "onSuccess": {},
          "onError": {}
        }
      },
      "FlowNextActionDefinition": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "enum": [
              "flow.next"
            ],
            "description": "On [flow pages](#flow-page-definition-sub-pages), proceed to the next page if it\nis present. Otherwise, the flow is considered to be complete and [`flow.finish`](#flowfinish) will\nbe called instead.\n"
          },
          "remapBefore": {},
          "remapAfter": {},
          "onSuccess": {},
          "onError": {}
        }
      },
      "FlowPageActionsDefinition": {
        "type": "object",
        "description": "These actions are fired on a flow page.",
        "additionalProperties": false,
        "properties": {
          "onFlowCancel": {
            "$ref": "#/components/schemas/ActionDefinition",
            "description": "This action gets triggered when `flow.cancel` gets called."
          },
          "onFlowFinish": {
            "$ref": "#/components/schemas/ActionDefinition",
            "description": "This action gets triggered when a flow is finished.\n\nA flow is finished when `flow.finish` gets called, or when `flow.next` gets called on the final\nsubpage. This action has a special property in which the cumulative input data from each previous subpage gets sent, instead of the individual block that triggered this action."
          }
        }
      },
      "FlowPageDefinition": {
        "type": "object",
        "description": "This describes what a page will look like in the app.",
        "required": [
          "type",
          "steps",
          "name"
        ],
        "additionalProperties": false,
        "properties": {
          "type": {
            "enum": [
              "flow"
            ]
          },
          "steps": {
            "type": "array",
            "minItems": 2,
            "description": "Steps belonging to this page's flow.",
            "items": {
              "$ref": "#/components/schemas/SubPage"
            }
          },
          "actions": {
            "$ref": "#/components/schemas/FlowPageActionsDefinition"
          },
          "progress": {
            "description": "The method that should be used to display the status of flow pages.",
            "enum": [
              "corner-dots",
              "hidden"
            ]
          },
          "name": {
            "type": "string",
            "maxLength": 50,
            "description": "The name of an app.\n\nThis field is always required and must be unique within the app, meaning that it is not possible to\nhave two pages with the same name. The name of the page is displayed at the top of each page as well\nas in the side navigational menu.\n\n> **Note**: The URL used to navigate to pages is determined by this property.\n"
          },
          "navTitle": {
            "$ref": "#/components/schemas/RemapperDefinition",
            "description": "The name of the page when displayed in the navigation menu.\n\nContext property `name` can be used to access the name of the page.\n"
          },
          "icon": {
            "type": "string",
            "description": "An optional icon from the fontawesome icon set\n\nThis will be displayed in the navigation menu.\n"
          },
          "parameters": {
            "type": "array",
            "description": "Page parameters can be used for linking to a page that should display a single resource.\n\nThis defined as a list of strings representing the properties to pass through. More often than not\npassing `id` through is sufficient, depending on the block.\n",
            "items": {
              "type": "string",
              "minLength": 1,
              "maxLength": 30
            }
          },
          "roles": {
            "type": "array",
            "description": "The list of roles that are allowed to view this page.\n\nIf the user doesnâ€™t have any of the roles in the list the page will be unavailable to them. An empty\nlist can be used to specify that users need to log in but do not need a specific role.\n\nUsers trying to visit a page without having the correct roles will be redirected to the first page\nthat they are allowed to view. If there arenâ€™t any accessible pages, the user will be logged out and\ninstructed to contact the app owner to get permissions.\n",
            "items": {
              "type": "string"
            }
          },
          "theme": {
            "$ref": "#/components/schemas/Theme"
          },
          "navigation": {
            "$ref": "#/components/schemas/AppLayoutDefinition/properties/navigation",
            "description": "The type of navigation displayed on the page.\n\nThis overrides the navigation property of the app itself. Defaults to `left-menu` if navigation or\nApp navigation are not set.\n\nSet to `bottom` to use a navigation pane at the bottom of the screen instead of the default side\nmenu. Set to `hidden` to display no navigational menus at all.\n"
          },
          "hideFromMenu": {
            "type": "boolean",
            "description": "Whether or not the page should be displayed in navigational menus.\n\nBy default all pages without parameters are added to navigational menus. Set to `true` to hide the\npage from menus.\n",
            "default": false
          }
        }
      },
      "FlowToActionDefinition": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "step"
        ],
        "properties": {
          "type": {
            "enum": [
              "flow.to"
            ],
            "description": "On [flow pages](#flow-page-definition-sub-pages), move to a specific step."
          },
          "step": {
            "$ref": "#/components/schemas/RemapperDefinition",
            "description": "The name of the step to move to.\n\nThis is a remapper which gets called with the action input and context.\n"
          },
          "remapBefore": {},
          "remapAfter": {},
          "onSuccess": {},
          "onError": {}
        }
      },
      "GoogleFontDefinition": {
        "type": "object",
        "description": "A Google font definition.",
        "additionalProperties": false,
        "required": [
          "family"
        ],
        "properties": {
          "source": {
            "description": "Use a font from [Google Fonts](https://fonts.google.com).",
            "enum": [
              "google"
            ]
          },
          "family": {
            "enum": [
              "ABeeZee",
              "Abel",
              "Abhaya Libre",
              "Abril Fatface",
              "Aclonica",
              "Acme",
              "Actor",
              "Adamina",
              "Advent Pro",
              "Aguafina Script",
              "Akaya Kanadaka",
              "Akaya Telivigala",
              "Akronim",
              "Aladin",
              "Alata",
              "Alatsi",
              "Aldrich",
              "Alef",
              "Alegreya",
              "Alegreya SC",
              "Alegreya Sans",
              "Alegreya Sans SC",
              "Aleo",
              "Alex Brush",
              "Alfa Slab One",
              "Alice",
              "Alike",
              "Alike Angular",
              "Allan",
              "Allerta",
              "Allerta Stencil",
              "Allison",
              "Allura",
              "Almarai",
              "Almendra",
              "Almendra Display",
              "Almendra SC",
              "Alumni Sans",
              "Amarante",
              "Amaranth",
              "Amatic SC",
              "Amethysta",
              "Amiko",
              "Amiri",
              "Amita",
              "Anaheim",
              "Andada Pro",
              "Andika",
              "Andika New Basic",
              "Angkor",
              "Annie Use Your Telescope",
              "Anonymous Pro",
              "Antic",
              "Antic Didone",
              "Antic Slab",
              "Anton",
              "Antonio",
              "Arapey",
              "Arbutus",
              "Arbutus Slab",
              "Architects Daughter",
              "Archivo",
              "Archivo Black",
              "Archivo Narrow",
              "Are You Serious",
              "Aref Ruqaa",
              "Arima Madurai",
              "Arimo",
              "Arizonia",
              "Armata",
              "Arsenal",
              "Artifika",
              "Arvo",
              "Arya",
              "Asap",
              "Asap Condensed",
              "Asar",
              "Asset",
              "Assistant",
              "Astloch",
              "Asul",
              "Athiti",
              "Atkinson Hyperlegible",
              "Atma",
              "Atomic Age",
              "Aubrey",
              "Audiowide",
              "Autour One",
              "Average",
              "Average Sans",
              "Averia Gruesa Libre",
              "Averia Libre",
              "Averia Sans Libre",
              "Averia Serif Libre",
              "Azeret Mono",
              "B612",
              "B612 Mono",
              "Bad Script",
              "Bahiana",
              "Bahianita",
              "Bai Jamjuree",
              "Ballet",
              "Baloo 2",
              "Baloo Bhai 2",
              "Baloo Bhaina 2",
              "Baloo Chettan 2",
              "Baloo Da 2",
              "Baloo Paaji 2",
              "Baloo Tamma 2",
              "Baloo Tammudu 2",
              "Baloo Thambi 2",
              "Balsamiq Sans",
              "Balthazar",
              "Bangers",
              "Barlow",
              "Barlow Condensed",
              "Barlow Semi Condensed",
              "Barriecito",
              "Barrio",
              "Basic",
              "Baskervville",
              "Battambang",
              "Baumans",
              "Bayon",
              "Be Vietnam",
              "Be Vietnam Pro",
              "Bebas Neue",
              "Belgrano",
              "Bellefair",
              "Belleza",
              "Bellota",
              "Bellota Text",
              "BenchNine",
              "Benne",
              "Bentham",
              "Berkshire Swash",
              "Besley",
              "Beth Ellen",
              "Bevan",
              "Big Shoulders Display",
              "Big Shoulders Inline Display",
              "Big Shoulders Inline Text",
              "Big Shoulders Stencil Display",
              "Big Shoulders Stencil Text",
              "Big Shoulders Text",
              "Bigelow Rules",
              "Bigshot One",
              "Bilbo",
              "Bilbo Swash Caps",
              "BioRhyme",
              "BioRhyme Expanded",
              "Birthstone",
              "Birthstone Bounce",
              "Biryani",
              "Bitter",
              "Black And White Picture",
              "Black Han Sans",
              "Black Ops One",
              "Blinker",
              "Bodoni Moda",
              "Bokor",
              "Bona Nova",
              "Bonbon",
              "Bonheur Royale",
              "Boogaloo",
              "Bowlby One",
              "Bowlby One SC",
              "Brawler",
              "Bree Serif",
              "Brygada 1918",
              "Bubblegum Sans",
              "Bubbler One",
              "Buda",
              "Buenard",
              "Bungee",
              "Bungee Hairline",
              "Bungee Inline",
              "Bungee Outline",
              "Bungee Shade",
              "Butcherman",
              "Butterfly Kids",
              "Cabin",
              "Cabin Condensed",
              "Cabin Sketch",
              "Caesar Dressing",
              "Cagliostro",
              "Cairo",
              "Caladea",
              "Calistoga",
              "Calligraffitti",
              "Cambay",
              "Cambo",
              "Candal",
              "Cantarell",
              "Cantata One",
              "Cantora One",
              "Capriola",
              "Caramel",
              "Carattere",
              "Cardo",
              "Carme",
              "Carrois Gothic",
              "Carrois Gothic SC",
              "Carter One",
              "Castoro",
              "Catamaran",
              "Caudex",
              "Caveat",
              "Caveat Brush",
              "Cedarville Cursive",
              "Ceviche One",
              "Chakra Petch",
              "Changa",
              "Changa One",
              "Chango",
              "Charm",
              "Charmonman",
              "Chathura",
              "Chau Philomene One",
              "Chela One",
              "Chelsea Market",
              "Chenla",
              "Cherish",
              "Cherry Cream Soda",
              "Cherry Swash",
              "Chewy",
              "Chicle",
              "Chilanka",
              "Chivo",
              "Chonburi",
              "Cinzel",
              "Cinzel Decorative",
              "Clicker Script",
              "Coda",
              "Coda Caption",
              "Codystar",
              "Coiny",
              "Combo",
              "Comfortaa",
              "Comic Neue",
              "Coming Soon",
              "Commissioner",
              "Concert One",
              "Condiment",
              "Content",
              "Contrail One",
              "Convergence",
              "Cookie",
              "Copse",
              "Corben",
              "Cormorant",
              "Cormorant Garamond",
              "Cormorant Infant",
              "Cormorant SC",
              "Cormorant Unicase",
              "Cormorant Upright",
              "Courgette",
              "Courier Prime",
              "Cousine",
              "Coustard",
              "Covered By Your Grace",
              "Crafty Girls",
              "Creepster",
              "Crete Round",
              "Crimson Pro",
              "Crimson Text",
              "Croissant One",
              "Crushed",
              "Cuprum",
              "Cute Font",
              "Cutive",
              "Cutive Mono",
              "DM Mono",
              "DM Sans",
              "DM Serif Display",
              "DM Serif Text",
              "Damion",
              "Dancing Script",
              "Dangrek",
              "Darker Grotesque",
              "David Libre",
              "Dawning of a New Day",
              "Days One",
              "Dekko",
              "Dela Gothic One",
              "Delius",
              "Delius Swash Caps",
              "Delius Unicase",
              "Della Respira",
              "Denk One",
              "Devonshire",
              "Dhurjati",
              "Didact Gothic",
              "Diplomata",
              "Diplomata SC",
              "Do Hyeon",
              "Dokdo",
              "Domine",
              "Donegal One",
              "Doppio One",
              "Dorsa",
              "Dosis",
              "DotGothic16",
              "Dr Sugiyama",
              "Duru Sans",
              "Dynalight",
              "EB Garamond",
              "Eagle Lake",
              "East Sea Dokdo",
              "Eater",
              "Economica",
              "Eczar",
              "El Messiri",
              "Electrolize",
              "Elsie",
              "Elsie Swash Caps",
              "Emblema One",
              "Emilys Candy",
              "Encode Sans",
              "Encode Sans Condensed",
              "Encode Sans Expanded",
              "Encode Sans SC",
              "Encode Sans Semi Condensed",
              "Encode Sans Semi Expanded",
              "Engagement",
              "Englebert",
              "Enriqueta",
              "Ephesis",
              "Epilogue",
              "Erica One",
              "Esteban",
              "Euphoria Script",
              "Ewert",
              "Exo",
              "Exo 2",
              "Expletus Sans",
              "Explora",
              "Fahkwang",
              "Fanwood Text",
              "Farro",
              "Farsan",
              "Fascinate",
              "Fascinate Inline",
              "Faster One",
              "Fasthand",
              "Fauna One",
              "Faustina",
              "Federant",
              "Federo",
              "Felipa",
              "Fenix",
              "Festive",
              "Finger Paint",
              "Fira Code",
              "Fira Mono",
              "Fira Sans",
              "Fira Sans Condensed",
              "Fira Sans Extra Condensed",
              "Fjalla One",
              "Fjord One",
              "Flamenco",
              "Flavors",
              "Fleur De Leah",
              "Fondamento",
              "Fontdiner Swanky",
              "Forum",
              "Francois One",
              "Frank Ruhl Libre",
              "Fraunces",
              "Freckle Face",
              "Fredericka the Great",
              "Fredoka One",
              "Freehand",
              "Fresca",
              "Frijole",
              "Fruktur",
              "Fugaz One",
              "Fuggles",
              "GFS Didot",
              "GFS Neohellenic",
              "Gabriela",
              "Gaegu",
              "Gafata",
              "Galada",
              "Galdeano",
              "Galindo",
              "Gamja Flower",
              "Gayathri",
              "Gelasio",
              "Gemunu Libre",
              "Gentium Basic",
              "Gentium Book Basic",
              "Geo",
              "Georama",
              "Geostar",
              "Geostar Fill",
              "Germania One",
              "Gideon Roman",
              "Gidugu",
              "Gilda Display",
              "Girassol",
              "Give You Glory",
              "Glass Antiqua",
              "Glegoo",
              "Gloria Hallelujah",
              "Glory",
              "Gluten",
              "Goblin One",
              "Gochi Hand",
              "Goldman",
              "Gorditas",
              "Gothic A1",
              "Gotu",
              "Goudy Bookletter 1911",
              "Gowun Batang",
              "Gowun Dodum",
              "Graduate",
              "Grand Hotel",
              "Grandstander",
              "Gravitas One",
              "Great Vibes",
              "Grechen Fuemen",
              "Grenze",
              "Grenze Gotisch",
              "Grey Qo",
              "Griffy",
              "Gruppo",
              "Gudea",
              "Gugi",
              "Gupter",
              "Gurajada",
              "Habibi",
              "Hachi Maru Pop",
              "Hahmlet",
              "Halant",
              "Hammersmith One",
              "Hanalei",
              "Hanalei Fill",
              "Handlee",
              "Hanuman",
              "Happy Monkey",
              "Harmattan",
              "Headland One",
              "Heebo",
              "Henny Penny",
              "Hepta Slab",
              "Herr Von Muellerhoff",
              "Hi Melody",
              "Hina Mincho",
              "Hind",
              "Hind Guntur",
              "Hind Madurai",
              "Hind Siliguri",
              "Hind Vadodara",
              "Holtwood One SC",
              "Homemade Apple",
              "Homenaje",
              "IBM Plex Mono",
              "IBM Plex Sans",
              "IBM Plex Sans Arabic",
              "IBM Plex Sans Condensed",
              "IBM Plex Sans Devanagari",
              "IBM Plex Sans Hebrew",
              "IBM Plex Sans KR",
              "IBM Plex Sans Thai",
              "IBM Plex Sans Thai Looped",
              "IBM Plex Serif",
              "IM Fell DW Pica",
              "IM Fell DW Pica SC",
              "IM Fell Double Pica",
              "IM Fell Double Pica SC",
              "IM Fell English",
              "IM Fell English SC",
              "IM Fell French Canon",
              "IM Fell French Canon SC",
              "IM Fell Great Primer",
              "IM Fell Great Primer SC",
              "Ibarra Real Nova",
              "Iceberg",
              "Iceland",
              "Imbue",
              "Imprima",
              "Inconsolata",
              "Inder",
              "Indie Flower",
              "Inika",
              "Inknut Antiqua",
              "Inria Sans",
              "Inria Serif",
              "Inter",
              "Irish Grover",
              "Istok Web",
              "Italiana",
              "Italianno",
              "Itim",
              "Jacques Francois",
              "Jacques Francois Shadow",
              "Jaldi",
              "JetBrains Mono",
              "Jim Nightshade",
              "Jockey One",
              "Jolly Lodger",
              "Jomhuria",
              "Jomolhari",
              "Josefin Sans",
              "Josefin Slab",
              "Jost",
              "Joti One",
              "Jua",
              "Judson",
              "Julee",
              "Julius Sans One",
              "Junge",
              "Jura",
              "Just Another Hand",
              "Just Me Again Down Here",
              "K2D",
              "Kadwa",
              "Kaisei Decol",
              "Kaisei HarunoUmi",
              "Kaisei Opti",
              "Kaisei Tokumin",
              "Kalam",
              "Kameron",
              "Kanit",
              "Kantumruy",
              "Karantina",
              "Karla",
              "Karma",
              "Katibeh",
              "Kaushan Script",
              "Kavivanar",
              "Kavoon",
              "Kdam Thmor",
              "Keania One",
              "Kelly Slab",
              "Kenia",
              "Khand",
              "Khmer",
              "Khula",
              "Kirang Haerang",
              "Kite One",
              "Kiwi Maru",
              "Klee One",
              "Knewave",
              "KoHo",
              "Kodchasan",
              "Koh Santepheap",
              "Kosugi",
              "Kosugi Maru",
              "Kotta One",
              "Koulen",
              "Kranky",
              "Kreon",
              "Kristi",
              "Krona One",
              "Krub",
              "Kufam",
              "Kulim Park",
              "Kumar One",
              "Kumar One Outline",
              "Kumbh Sans",
              "Kurale",
              "La Belle Aurore",
              "Lacquer",
              "Laila",
              "Lakki Reddy",
              "Lalezar",
              "Lancelot",
              "Langar",
              "Lateef",
              "Lato",
              "League Script",
              "Leckerli One",
              "Ledger",
              "Lekton",
              "Lemon",
              "Lemonada",
              "Lexend",
              "Lexend Deca",
              "Lexend Exa",
              "Lexend Giga",
              "Lexend Mega",
              "Lexend Peta",
              "Lexend Tera",
              "Lexend Zetta",
              "Libre Barcode 128",
              "Libre Barcode 128 Text",
              "Libre Barcode 39",
              "Libre Barcode 39 Extended",
              "Libre Barcode 39 Extended Text",
              "Libre Barcode 39 Text",
              "Libre Barcode EAN13 Text",
              "Libre Baskerville",
              "Libre Caslon Display",
              "Libre Caslon Text",
              "Libre Franklin",
              "Life Savers",
              "Lilita One",
              "Lily Script One",
              "Limelight",
              "Linden Hill",
              "Literata",
              "Liu Jian Mao Cao",
              "Livvic",
              "Lobster",
              "Lobster Two",
              "Londrina Outline",
              "Londrina Shadow",
              "Londrina Sketch",
              "Londrina Solid",
              "Long Cang",
              "Lora",
              "Love Ya Like A Sister",
              "Loved by the King",
              "Lovers Quarrel",
              "Luckiest Guy",
              "Lusitana",
              "Lustria",
              "M PLUS 1p",
              "M PLUS Rounded 1c",
              "Ma Shan Zheng",
              "Macondo",
              "Macondo Swash Caps",
              "Mada",
              "Magra",
              "Maiden Orange",
              "Maitree",
              "Major Mono Display",
              "Mako",
              "Mali",
              "Mallanna",
              "Mandali",
              "Manjari",
              "Manrope",
              "Mansalva",
              "Manuale",
              "Marcellus",
              "Marcellus SC",
              "Marck Script",
              "Margarine",
              "Markazi Text",
              "Marko One",
              "Marmelad",
              "Martel",
              "Martel Sans",
              "Marvel",
              "Mate",
              "Mate SC",
              "Maven Pro",
              "McLaren",
              "Meddon",
              "MedievalSharp",
              "Medula One",
              "Meera Inimai",
              "Megrim",
              "Meie Script",
              "Merienda",
              "Merienda One",
              "Merriweather",
              "Merriweather Sans",
              "Metal",
              "Metal Mania",
              "Metamorphous",
              "Metrophobic",
              "Michroma",
              "Milonga",
              "Miltonian",
              "Miltonian Tattoo",
              "Mina",
              "Miniver",
              "Miriam Libre",
              "Mirza",
              "Miss Fajardose",
              "Mitr",
              "Modak",
              "Modern Antiqua",
              "Mogra",
              "Molengo",
              "Molle",
              "Monda",
              "Monofett",
              "Monoton",
              "Monsieur La Doulaise",
              "Montaga",
              "MonteCarlo",
              "Montez",
              "Montserrat",
              "Montserrat Alternates",
              "Montserrat Subrayada",
              "Moul",
              "Moulpali",
              "Mountains of Christmas",
              "Mouse Memoirs",
              "Mr Bedfort",
              "Mr Dafoe",
              "Mr De Haviland",
              "Mrs Saint Delafield",
              "Mrs Sheppards",
              "Mukta",
              "Mukta Mahee",
              "Mukta Malar",
              "Mukta Vaani",
              "Mulish",
              "MuseoModerno",
              "Mystery Quest",
              "NTR",
              "Nanum Brush Script",
              "Nanum Gothic",
              "Nanum Gothic Coding",
              "Nanum Myeongjo",
              "Nanum Pen Script",
              "Nerko One",
              "Neucha",
              "Neuton",
              "New Rocker",
              "New Tegomin",
              "News Cycle",
              "Newsreader",
              "Niconne",
              "Niramit",
              "Nixie One",
              "Nobile",
              "Nokora",
              "Norican",
              "Nosifer",
              "Notable",
              "Nothing You Could Do",
              "Noticia Text",
              "Noto Kufi Arabic",
              "Noto Music",
              "Noto Naskh Arabic",
              "Noto Nastaliq Urdu",
              "Noto Rashi Hebrew",
              "Noto Sans",
              "Noto Sans Adlam",
              "Noto Sans Adlam Unjoined",
              "Noto Sans Anatolian Hieroglyphs",
              "Noto Sans Arabic",
              "Noto Sans Armenian",
              "Noto Sans Avestan",
              "Noto Sans Balinese",
              "Noto Sans Bamum",
              "Noto Sans Bassa Vah",
              "Noto Sans Batak",
              "Noto Sans Bengali",
              "Noto Sans Bhaiksuki",
              "Noto Sans Brahmi",
              "Noto Sans Buginese",
              "Noto Sans Buhid",
              "Noto Sans Canadian Aboriginal",
              "Noto Sans Carian",
              "Noto Sans Caucasian Albanian",
              "Noto Sans Chakma",
              "Noto Sans Cham",
              "Noto Sans Cherokee",
              "Noto Sans Coptic",
              "Noto Sans Cuneiform",
              "Noto Sans Cypriot",
              "Noto Sans Deseret",
              "Noto Sans Devanagari",
              "Noto Sans Display",
              "Noto Sans Duployan",
              "Noto Sans Egyptian Hieroglyphs",
              "Noto Sans Elbasan",
              "Noto Sans Elymaic",
              "Noto Sans Georgian",
              "Noto Sans Glagolitic",
              "Noto Sans Gothic",
              "Noto Sans Grantha",
              "Noto Sans Gujarati",
              "Noto Sans Gunjala Gondi",
              "Noto Sans Gurmukhi",
              "Noto Sans HK",
              "Noto Sans Hanifi Rohingya",
              "Noto Sans Hanunoo",
              "Noto Sans Hatran",
              "Noto Sans Hebrew",
              "Noto Sans Imperial Aramaic",
              "Noto Sans Indic Siyaq Numbers",
              "Noto Sans Inscriptional Pahlavi",
              "Noto Sans Inscriptional Parthian",
              "Noto Sans JP",
              "Noto Sans Javanese",
              "Noto Sans KR",
              "Noto Sans Kaithi",
              "Noto Sans Kannada",
              "Noto Sans Kayah Li",
              "Noto Sans Kharoshthi",
              "Noto Sans Khmer",
              "Noto Sans Khojki",
              "Noto Sans Khudawadi",
              "Noto Sans Lao",
              "Noto Sans Lepcha",
              "Noto Sans Limbu",
              "Noto Sans Linear A",
              "Noto Sans Linear B",
              "Noto Sans Lisu",
              "Noto Sans Lycian",
              "Noto Sans Lydian",
              "Noto Sans Mahajani",
              "Noto Sans Malayalam",
              "Noto Sans Mandaic",
              "Noto Sans Manichaean",
              "Noto Sans Marchen",
              "Noto Sans Masaram Gondi",
              "Noto Sans Math",
              "Noto Sans Mayan Numerals",
              "Noto Sans Medefaidrin",
              "Noto Sans Meroitic",
              "Noto Sans Miao",
              "Noto Sans Modi",
              "Noto Sans Mongolian",
              "Noto Sans Mono",
              "Noto Sans Mro",
              "Noto Sans Multani",
              "Noto Sans Myanmar",
              "Noto Sans N Ko",
              "Noto Sans Nabataean",
              "Noto Sans New Tai Lue",
              "Noto Sans Newa",
              "Noto Sans Nushu",
              "Noto Sans Ogham",
              "Noto Sans Ol Chiki",
              "Noto Sans Old Hungarian",
              "Noto Sans Old Italic",
              "Noto Sans Old North Arabian",
              "Noto Sans Old Permic",
              "Noto Sans Old Persian",
              "Noto Sans Old Sogdian",
              "Noto Sans Old South Arabian",
              "Noto Sans Old Turkic",
              "Noto Sans Oriya",
              "Noto Sans Osage",
              "Noto Sans Osmanya",
              "Noto Sans Pahawh Hmong",
              "Noto Sans Palmyrene",
              "Noto Sans Pau Cin Hau",
              "Noto Sans Phags Pa",
              "Noto Sans Phoenician",
              "Noto Sans Psalter Pahlavi",
              "Noto Sans Rejang",
              "Noto Sans Runic",
              "Noto Sans SC",
              "Noto Sans Samaritan",
              "Noto Sans Saurashtra",
              "Noto Sans Sharada",
              "Noto Sans Shavian",
              "Noto Sans Siddham",
              "Noto Sans Sinhala",
              "Noto Sans Sogdian",
              "Noto Sans Sora Sompeng",
              "Noto Sans Soyombo",
              "Noto Sans Sundanese",
              "Noto Sans Syloti Nagri",
              "Noto Sans Symbols",
              "Noto Sans Symbols 2",
              "Noto Sans Syriac",
              "Noto Sans TC",
              "Noto Sans Tagalog",
              "Noto Sans Tagbanwa",
              "Noto Sans Tai Le",
              "Noto Sans Tai Tham",
              "Noto Sans Tai Viet",
              "Noto Sans Takri",
              "Noto Sans Tamil",
              "Noto Sans Tamil Supplement",
              "Noto Sans Telugu",
              "Noto Sans Thaana",
              "Noto Sans Thai",
              "Noto Sans Thai Looped",
              "Noto Sans Tifinagh",
              "Noto Sans Tirhuta",
              "Noto Sans Ugaritic",
              "Noto Sans Vai",
              "Noto Sans Wancho",
              "Noto Sans Warang Citi",
              "Noto Sans Yi",
              "Noto Sans Zanabazar Square",
              "Noto Serif",
              "Noto Serif Ahom",
              "Noto Serif Armenian",
              "Noto Serif Balinese",
              "Noto Serif Bengali",
              "Noto Serif Devanagari",
              "Noto Serif Display",
              "Noto Serif Dogra",
              "Noto Serif Ethiopic",
              "Noto Serif Georgian",
              "Noto Serif Grantha",
              "Noto Serif Gujarati",
              "Noto Serif Gurmukhi",
              "Noto Serif Hebrew",
              "Noto Serif JP",
              "Noto Serif KR",
              "Noto Serif Kannada",
              "Noto Serif Khmer",
              "Noto Serif Lao",
              "Noto Serif Malayalam",
              "Noto Serif Myanmar",
              "Noto Serif Nyiakeng Puachue Hmong",
              "Noto Serif SC",
              "Noto Serif Sinhala",
              "Noto Serif TC",
              "Noto Serif Tamil",
              "Noto Serif Tangut",
              "Noto Serif Telugu",
              "Noto Serif Thai",
              "Noto Serif Tibetan",
              "Noto Serif Yezidi",
              "Noto Traditional Nushu",
              "Nova Cut",
              "Nova Flat",
              "Nova Mono",
              "Nova Oval",
              "Nova Round",
              "Nova Script",
              "Nova Slim",
              "Nova Square",
              "Numans",
              "Nunito",
              "Nunito Sans",
              "Odibee Sans",
              "Odor Mean Chey",
              "Offside",
              "Oi",
              "Old Standard TT",
              "Oldenburg",
              "Oleo Script",
              "Oleo Script Swash Caps",
              "Open Sans",
              "Open Sans Condensed",
              "Oranienbaum",
              "Orbitron",
              "Oregano",
              "Orelega One",
              "Orienta",
              "Original Surfer",
              "Oswald",
              "Otomanopee One",
              "Over the Rainbow",
              "Overlock",
              "Overlock SC",
              "Overpass",
              "Overpass Mono",
              "Ovo",
              "Oxanium",
              "Oxygen",
              "Oxygen Mono",
              "PT Mono",
              "PT Sans",
              "PT Sans Caption",
              "PT Sans Narrow",
              "PT Serif",
              "PT Serif Caption",
              "Pacifico",
              "Padauk",
              "Palanquin",
              "Palanquin Dark",
              "Palette Mosaic",
              "Pangolin",
              "Paprika",
              "Parisienne",
              "Passero One",
              "Passion One",
              "Pathway Gothic One",
              "Patrick Hand",
              "Patrick Hand SC",
              "Pattaya",
              "Patua One",
              "Pavanam",
              "Paytone One",
              "Peddana",
              "Peralta",
              "Permanent Marker",
              "Petit Formal Script",
              "Petrona",
              "Philosopher",
              "Piazzolla",
              "Piedra",
              "Pinyon Script",
              "Pirata One",
              "Plaster",
              "Play",
              "Playball",
              "Playfair Display",
              "Playfair Display SC",
              "Podkova",
              "Poiret One",
              "Poller One",
              "Poly",
              "Pompiere",
              "Pontano Sans",
              "Poor Story",
              "Poppins",
              "Port Lligat Sans",
              "Port Lligat Slab",
              "Potta One",
              "Pragati Narrow",
              "Prata",
              "Preahvihear",
              "Press Start 2P",
              "Pridi",
              "Princess Sofia",
              "Prociono",
              "Prompt",
              "Prosto One",
              "Proza Libre",
              "Public Sans",
              "Puritan",
              "Purple Purse",
              "Qahiri",
              "Quando",
              "Quantico",
              "Quattrocento",
              "Quattrocento Sans",
              "Questrial",
              "Quicksand",
              "Quintessential",
              "Qwigley",
              "Racing Sans One",
              "Radley",
              "Rajdhani",
              "Rakkas",
              "Raleway",
              "Raleway Dots",
              "Ramabhadra",
              "Ramaraja",
              "Rambla",
              "Rammetto One",
              "Rampart One",
              "Ranchers",
              "Rancho",
              "Ranga",
              "Rasa",
              "Rationale",
              "Ravi Prakash",
              "Recursive",
              "Red Hat Display",
              "Red Hat Text",
              "Red Rose",
              "Redressed",
              "Reem Kufi",
              "Reenie Beanie",
              "Reggae One",
              "Revalia",
              "Rhodium Libre",
              "Ribeye",
              "Ribeye Marrow",
              "Righteous",
              "Risque",
              "Roboto",
              "Roboto Condensed",
              "Roboto Mono",
              "Roboto Slab",
              "Rochester",
              "Rock Salt",
              "RocknRoll One",
              "Rokkitt",
              "Romanesco",
              "Ropa Sans",
              "Rosario",
              "Rosarivo",
              "Rouge Script",
              "Rowdies",
              "Rozha One",
              "Rubik",
              "Rubik Beastly",
              "Rubik Mono One",
              "Ruda",
              "Rufina",
              "Ruge Boogie",
              "Ruluko",
              "Rum Raisin",
              "Ruslan Display",
              "Russo One",
              "Ruthie",
              "Rye",
              "STIX Two Text",
              "Sacramento",
              "Sahitya",
              "Sail",
              "Saira",
              "Saira Condensed",
              "Saira Extra Condensed",
              "Saira Semi Condensed",
              "Saira Stencil One",
              "Salsa",
              "Sanchez",
              "Sancreek",
              "Sansita",
              "Sansita Swashed",
              "Sarabun",
              "Sarala",
              "Sarina",
              "Sarpanch",
              "Satisfy",
              "Sawarabi Gothic",
              "Sawarabi Mincho",
              "Scada",
              "Scheherazade",
              "Scheherazade New",
              "Schoolbell",
              "Scope One",
              "Seaweed Script",
              "Secular One",
              "Sedgwick Ave",
              "Sedgwick Ave Display",
              "Sen",
              "Sevillana",
              "Seymour One",
              "Shadows Into Light",
              "Shadows Into Light Two",
              "Shanti",
              "Share",
              "Share Tech",
              "Share Tech Mono",
              "Shippori Mincho",
              "Shippori Mincho B1",
              "Shojumaru",
              "Short Stack",
              "Shrikhand",
              "Siemreap",
              "Sigmar One",
              "Signika",
              "Signika Negative",
              "Simonetta",
              "Single Day",
              "Sintony",
              "Sirin Stencil",
              "Six Caps",
              "Skranji",
              "Slabo 13px",
              "Slabo 27px",
              "Slackey",
              "Smokum",
              "Smythe",
              "Sniglet",
              "Snippet",
              "Snowburst One",
              "Sofadi One",
              "Sofia",
              "Solway",
              "Song Myung",
              "Sonsie One",
              "Sora",
              "Sorts Mill Goudy",
              "Source Code Pro",
              "Source Sans Pro",
              "Source Serif Pro",
              "Space Grotesk",
              "Space Mono",
              "Spartan",
              "Special Elite",
              "Spectral",
              "Spectral SC",
              "Spicy Rice",
              "Spinnaker",
              "Spirax",
              "Squada One",
              "Sree Krushnadevaraya",
              "Sriracha",
              "Srisakdi",
              "Staatliches",
              "Stalemate",
              "Stalinist One",
              "Stardos Stencil",
              "Stick",
              "Stick No Bills",
              "Stint Ultra Condensed",
              "Stint Ultra Expanded",
              "Stoke",
              "Strait",
              "Style Script",
              "Stylish",
              "Sue Ellen Francisco",
              "Suez One",
              "Sulphur Point",
              "Sumana",
              "Sunflower",
              "Sunshiney",
              "Supermercado One",
              "Sura",
              "Suranna",
              "Suravaram",
              "Suwannaphum",
              "Swanky and Moo Moo",
              "Syncopate",
              "Syne",
              "Syne Mono",
              "Syne Tactile",
              "Tajawal",
              "Tangerine",
              "Taprom",
              "Tauri",
              "Taviraj",
              "Teko",
              "Telex",
              "Tenali Ramakrishna",
              "Tenor Sans",
              "Text Me One",
              "Texturina",
              "Thasadith",
              "The Girl Next Door",
              "Tienne",
              "Tillana",
              "Timmana",
              "Tinos",
              "Titan One",
              "Titillium Web",
              "Tomorrow",
              "Tourney",
              "Trade Winds",
              "Train One",
              "Trirong",
              "Trispace",
              "Trocchi",
              "Trochut",
              "Truculenta",
              "Trykker",
              "Tulpen One",
              "Turret Road",
              "Ubuntu",
              "Ubuntu Condensed",
              "Ubuntu Mono",
              "Uchen",
              "Ultra",
              "Uncial Antiqua",
              "Underdog",
              "Unica One",
              "UnifrakturCook",
              "UnifrakturMaguntia",
              "Unkempt",
              "Unlock",
              "Unna",
              "Urbanist",
              "VT323",
              "Vampiro One",
              "Varela",
              "Varela Round",
              "Varta",
              "Vast Shadow",
              "Vesper Libre",
              "Viaoda Libre",
              "Vibes",
              "Vibur",
              "Vidaloka",
              "Viga",
              "Voces",
              "Volkhov",
              "Vollkorn",
              "Vollkorn SC",
              "Voltaire",
              "Waiting for the Sunrise",
              "Wallpoet",
              "Walter Turncoat",
              "Warnes",
              "Wellfleet",
              "Wendy One",
              "WindSong",
              "Wire One",
              "Work Sans",
              "Xanh Mono",
              "Yaldevi",
              "Yanone Kaffeesatz",
              "Yantramanav",
              "Yatra One",
              "Yellowtail",
              "Yeon Sung",
              "Yeseva One",
              "Yesteryear",
              "Yomogi",
              "Yrsa",
              "Yusei Magic",
              "ZCOOL KuaiLe",
              "ZCOOL QingKe HuangYou",
              "ZCOOL XiaoWei",
              "Zen Dots",
              "Zen Loop",
              "Zen Tokyo Zoo",
              "Zeyada",
              "Zhi Mang Xing",
              "Zilla Slab",
              "Zilla Slab Highlight"
            ],
            "description": "The font to use in the app.\n\nAny font available on [Google Fonts](https://fonts.google.com) may be used.\n",
            "default": {
              "family": "Open Sans",
              "source": "google"
            }
          }
        }
      },
      "Health": {
        "type": "object",
        "description": "A health check status",
        "readOnly": true,
        "additionalProperties": false,
        "properties": {
          "database": {
            "type": "boolean",
            "description": "Whether or not the database status is healthy"
          }
        }
      },
      "JSONPointer": {
        "type": "object",
        "description": "A JSON pointer which may be used to reference a JSON schema.",
        "additionalProperties": false,
        "required": [
          "$ref"
        ],
        "properties": {
          "$ref": {
            "type": "string",
            "description": "A JSON schema reference.",
            "pattern": "^#\\/definitions\\/",
            "example": "#/definitions/MyReusableSchema"
          },
          "default": {
            "description": "The default value that will be used."
          },
          "title": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "description": "A short title of the instance.\n\nThis is used in various places inside Appsemble Studio.\n"
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "maxLength": 5000,
            "description": "A description of the instance.\n\nThis is used in various places inside Appsemble Studio.\n"
          }
        }
      },
      "JSONSchemaAnyOf": {
        "type": "object",
        "description": "A JSON schema which determines the value must match one or more of the given schemas.",
        "additionalProperties": false,
        "required": [
          "anyOf"
        ],
        "properties": {
          "anyOf": {
            "type": "array",
            "description": "The JSON schema must match one or more of the given schemas.",
            "items": {
              "$ref": "#/components/schemas/JSONSchema"
            }
          },
          "example": {
            "description": "An example value which is valid according to this schema."
          },
          "default": {
            "description": "The default value which is used if no value is supplied."
          },
          "title": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "description": "A short title of the instance.\n\nThis is used in various places inside Appsemble Studio.\n"
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "maxLength": 5000,
            "description": "A description of the instance.\n\nThis is used in various places inside Appsemble Studio.\n"
          }
        }
      },
      "JSONSchemaArray": {
        "type": "object",
        "description": "A JSON schema for an array.",
        "additionalProperties": false,
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "enum": [
              "array"
            ],
            "description": "The type of the JSON schema. An array means a list of data."
          },
          "example": {
            "type": "array",
            "description": "An example array which is valid according to this schema."
          },
          "default": {
            "type": "array",
            "description": "The default value which is used if no value is supplied."
          },
          "maxItems": {
            "type": "integer",
            "description": "The minimum amount of items the array is allowed to have.",
            "minimum": 1
          },
          "minItems": {
            "type": "integer",
            "description": "The maximum amount of items the array is allowed to have.",
            "minimum": 0
          },
          "uniqueItems": {
            "type": "boolean",
            "description": "If true, all items in the array need to be unique",
            "default": false
          },
          "items": {
            "$ref": "#/components/schemas/JSONSchema",
            "description": "This property describes what the items in an array should look like."
          },
          "title": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "description": "A short title of the instance.\n\nThis is used in various places inside Appsemble Studio.\n"
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "maxLength": 5000,
            "description": "A description of the instance.\n\nThis is used in various places inside Appsemble Studio.\n"
          }
        }
      },
      "JSONSchemaBoolean": {
        "type": "object",
        "description": "A JSON schema for a boolean.",
        "additionalProperties": false,
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "enum": [
              "boolean"
            ],
            "description": "The type of the JSON schema. A boolean means either true or false."
          },
          "example": {
            "type": "boolean",
            "description": "An example boolean which is valid according to this schema."
          },
          "default": {
            "type": "boolean",
            "description": "The default value which is used if no value is supplied."
          },
          "enum": {
            "type": "array",
            "description": "If an enum is specified, the type can be safely removed.",
            "items": {
              "type": "boolean"
            }
          },
          "const": {
            "type": "boolean",
            "description": "If const is specified, the type can be safely removed."
          },
          "title": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "description": "A short title of the instance.\n\nThis is used in various places inside Appsemble Studio.\n"
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "maxLength": 5000,
            "description": "A description of the instance.\n\nThis is used in various places inside Appsemble Studio.\n"
          }
        }
      },
      "JSONSchemaConst": {
        "type": "object",
        "description": "A JSON schema which describes a constant",
        "additionalProperties": false,
        "required": [
          "const"
        ],
        "properties": {
          "const": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  null
                ]
              }
            ],
            "description": "The given value must exactly match one the value specified here."
          },
          "title": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "description": "A short title of the instance.\n\nThis is used in various places inside Appsemble Studio.\n"
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "maxLength": 5000,
            "description": "A description of the instance.\n\nThis is used in various places inside Appsemble Studio.\n"
          }
        }
      },
      "JSONSchemaEnum": {
        "type": "object",
        "description": "A JSON schema for an enum.",
        "additionalProperties": false,
        "required": [
          "enum"
        ],
        "properties": {
          "enum": {
            "type": "array",
            "description": "A specific set of values this property is allowed to have.",
            "items": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "number"
                },
                {
                  "type": "string"
                },
                {
                  "enum": [
                    null
                  ]
                }
              ]
            }
          },
          "enumDescriptions": {
            "type": "array",
            "description": "An array is descriptions for the enum values.\n\nThe description is applied to the enum value at the same index.",
            "items": {
              "type": "string"
            }
          },
          "example": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  null
                ]
              }
            ],
            "description": "An example which is valid according to this schema."
          },
          "default": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  null
                ]
              }
            ],
            "description": "The default value which is used if no value is supplied."
          },
          "title": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "description": "A short title of the instance.\n\nThis is used in various places inside Appsemble Studio.\n"
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "maxLength": 5000,
            "description": "A description of the instance.\n\nThis is used in various places inside Appsemble Studio.\n"
          }
        }
      },
      "JSONSchemaInteger": {
        "type": "object",
        "description": "A JSON schema for an integer.",
        "additionalProperties": false,
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "enum": [
              "integer"
            ],
            "description": "The type of the JSON schema. An integer means a fractionless number."
          },
          "example": {
            "type": "integer",
            "description": "An example integer which is valid according to this schema."
          },
          "default": {
            "type": "integer",
            "description": "The default value which is used if no value is supplied."
          },
          "enum": {
            "type": "array",
            "description": "If an enum is specified, the type can be safely removed.",
            "items": {
              "type": "integer"
            }
          },
          "const": {
            "type": "integer",
            "description": "If const is specified, the type can be safely removed."
          },
          "minimum": {
            "type": "integer",
            "description": "The minimum value of the number.",
            "example": 0
          },
          "maximum": {
            "type": "integer",
            "description": "The maximum value of the number.",
            "example": 100
          },
          "multipleOf": {
            "type": "integer",
            "description": "The value must be a multiple of this number.\n\nFor example, if this is set to 3, then the values 0, 3, 6, 9, etc. will be allowed, but not 1, 2, 4,\n5, 7, 8, etc.\n"
          },
          "title": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "description": "A short title of the instance.\n\nThis is used in various places inside Appsemble Studio.\n"
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "maxLength": 5000,
            "description": "A description of the instance.\n\nThis is used in various places inside Appsemble Studio.\n"
          }
        }
      },
      "JSONSchemaMultiType": {
        "type": "object",
        "description": "A JSON schema which defines multiple types.",
        "additionalProperties": false,
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "array",
            "uniqueItems": true,
            "minItems": 2,
            "description": "The type of the JSON schema. Itâ€™s recommended to use only one.",
            "items": {
              "enum": [
                "array",
                "boolean",
                "integer",
                "null",
                "number",
                "string"
              ]
            }
          },
          "example": {
            "description": "An example which is valid according to this schema."
          },
          "default": {
            "description": "The default value which is used if no value is supplied."
          },
          "maxItems": {
            "type": "integer",
            "description": "The minimum amount of items the array is allowed to have.",
            "minimum": 1
          },
          "minItems": {
            "type": "integer",
            "description": "The maximum amount of items the array is allowed to have.",
            "minimum": 0
          },
          "uniqueItems": {
            "type": "boolean",
            "description": "If true, all items in the array need to be unique",
            "default": false
          },
          "items": {
            "$ref": "#/components/schemas/JSONSchema",
            "description": "This property describes what the items in an array should look like."
          },
          "minimum": {
            "type": "integer",
            "description": "The minimum value of the number.",
            "example": 0
          },
          "maximum": {
            "type": "integer",
            "description": "The maximum value of the number.",
            "example": 100
          },
          "multipleOf": {
            "type": "integer",
            "description": "The value must be a multiple of this number.\n\nFor example, if this is set to 3, then the values 0, 3, 6, 9, etc. will be allowed, but not 1, 2, 4,\n5, 7, 8, etc.\n"
          },
          "maxProperties": {
            "type": "integer",
            "description": "The maximum number of properties the object is allowed to have.",
            "minimum": 0
          },
          "minProperties": {
            "type": "integer",
            "description": "The minimum number of properties the object is must have.",
            "minimum": 1
          },
          "properties": {
            "type": "object",
            "description": "A mapping of object keys for the object to nested JSON schemas.",
            "additionalProperties": {
              "$ref": "#/components/schemas/JSONSchema"
            }
          },
          "required": {
            "type": "array",
            "description": "A list of properties that are required.",
            "minItems": 1,
            "items": {
              "type": "string",
              "description": "A property name which is required on the object."
            }
          },
          "additionalProperties": {
            "description": "Describe if this object is allowed to have properties besides those defined in `properties`\n\nItâ€™s recommended to set this to `false`.\n",
            "example": false,
            "anyOf": [
              {
                "type": "boolean",
                "description": "If false, the object may not have any additional properties.\n\nIf true, the object may have **any** type of additional properties. This is **not** recommended.\n"
              },
              {
                "$ref": "#/components/schemas/JSONSchema",
                "description": "If this is a JSON schema, it describes any additional properties."
              }
            ]
          },
          "format": {
            "enum": [
              "date-time",
              "time",
              "date",
              "duration",
              "email",
              "idn-email",
              "hostname",
              "idn-hostname",
              "ipv4",
              "ipv6",
              "uuid",
              "uri",
              "uri-reference",
              "iri",
              "iri-reference",
              "uri-template",
              "json-pointer",
              "relative-json-pointer",
              "regex",
              "action",
              "binary",
              "event-emitter",
              "event-listener",
              "fontawesome"
            ],
            "description": "The format values should adhere to."
          },
          "minLength": {
            "type": "integer",
            "description": "The minimum length of the string.",
            "minimum": 1
          },
          "maxLength": {
            "type": "integer",
            "description": "The maximum length of the string.\n\nItâ€™s highly recommended to set this property, even if itâ€™s a big number. For example 5000 characters\nis plenty for most larger input fields. Not doing so may result in extremely large user input, which\nresults in a bad user experience.\n",
            "minimum": 1,
            "example": 5000
          },
          "pattern": {
            "type": "string",
            "description": "A regular expression to describe user input.\n\nRegular expressions are a powerful way to enforce proper user input, but the learning curve is high.\nIf you donâ€™t know what this is, we recommend to omit this field for now.\n",
            "minLength": 1,
            "format": "regex"
          },
          "title": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "description": "A short title of the instance.\n\nThis is used in various places inside Appsemble Studio.\n"
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "maxLength": 5000,
            "description": "A description of the instance.\n\nThis is used in various places inside Appsemble Studio.\n"
          }
        }
      },
      "JSONSchemaNot": {
        "type": "object",
        "description": "A JSON schema which may not be matched.",
        "additionalProperties": false,
        "required": [
          "not"
        ],
        "properties": {
          "not": {
            "$ref": "#/components/schemas/JSONSchema",
            "description": "The JSON schema which the value may not match."
          },
          "example": {
            "description": "An example value which is valid according to this schema."
          },
          "default": {
            "description": "The default value which is used if no value is supplied."
          },
          "title": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "description": "A short title of the instance.\n\nThis is used in various places inside Appsemble Studio.\n"
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "maxLength": 5000,
            "description": "A description of the instance.\n\nThis is used in various places inside Appsemble Studio.\n"
          }
        }
      },
      "JSONSchemaNull": {
        "type": "object",
        "description": "A JSON schema of type null only accepts a null value",
        "additionalProperties": false,
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "enum": [
              "null"
            ],
            "description": "Only accept a null value."
          },
          "title": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "description": "A short title of the instance.\n\nThis is used in various places inside Appsemble Studio.\n"
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "maxLength": 5000,
            "description": "A description of the instance.\n\nThis is used in various places inside Appsemble Studio.\n"
          }
        }
      },
      "JSONSchemaNumber": {
        "type": "object",
        "description": "A JSON schema for a number which has fractions.",
        "additionalProperties": false,
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "enum": [
              "number"
            ],
            "description": "The type of the JSON schema. A number represents a number which has fractions. For fractionless numbers, use `integer` instead."
          },
          "enum": {
            "type": "array",
            "description": "If an enum is specified, the type can be safely removed.",
            "items": {
              "type": "number"
            }
          },
          "const": {
            "type": "number",
            "description": "If const is specified, the type can be safely removed."
          },
          "example": {
            "type": "number",
            "description": "An example number which is valid according to this schema."
          },
          "default": {
            "type": "number",
            "description": "The default value which is used if no value is supplied."
          },
          "minimum": {
            "type": "number",
            "description": "The minimum value of the number.",
            "example": 0
          },
          "maximum": {
            "type": "number",
            "description": "The maximum value of the number.",
            "example": 100
          },
          "exclusiveMinimum": {
            "type": "number",
            "description": "The value must be bigger than this number. The given value itself is not allowed."
          },
          "exclusiveMaximum": {
            "type": "number",
            "description": "The value must be smaller than this number. The given value itself is not allowed."
          },
          "multipleOf": {
            "type": "number",
            "description": "The value must be a multiple of this number.\n\nFor example, if this is set to 0.5, then the values 0, 0.5, 1, 1.5, 2, 2.5, etc. will be allowed,\nbut not 0.3, 1.7, etc.\n"
          },
          "title": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "description": "A short title of the instance.\n\nThis is used in various places inside Appsemble Studio.\n"
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "maxLength": 5000,
            "description": "A description of the instance.\n\nThis is used in various places inside Appsemble Studio.\n"
          }
        }
      },
      "JSONSchemaObject": {
        "type": "object",
        "description": "A JSON schema for an object.",
        "additionalProperties": false,
        "required": [
          "type",
          "additionalProperties"
        ],
        "properties": {
          "type": {
            "enum": [
              "object"
            ],
            "description": "The type of the JSON schema."
          },
          "example": {
            "type": "object",
            "description": "An example object which is valid according to this schema.",
            "additionalProperties": true
          },
          "default": {
            "type": "object",
            "description": "The default value which is used if no value is supplied.",
            "additionalProperties": true
          },
          "maxProperties": {
            "type": "integer",
            "description": "The maximum number of properties the object is allowed to have.",
            "minimum": 0
          },
          "minProperties": {
            "type": "integer",
            "description": "The minimum number of properties the object is must have.",
            "minimum": 1
          },
          "required": {
            "type": "array",
            "description": "A list of properties that are required.",
            "minItems": 1,
            "items": {
              "type": "string",
              "description": "A property name which is required on the object."
            }
          },
          "properties": {
            "type": "object",
            "description": "A mapping of object keys for the object to nested JSON schemas.",
            "additionalProperties": {
              "$ref": "#/components/schemas/JSONSchema"
            }
          },
          "additionalProperties": {
            "description": "Describe if this object is allowed to have properties besides those defined in `properties`\n\nItâ€™s recommended to set this to `false`.\n",
            "example": false,
            "anyOf": [
              {
                "type": "boolean",
                "description": "If false, the object may not have any additional properties.\n\nIf true, the object may have **any** type of additional properties. This is **not** recommended.\n"
              },
              {
                "$ref": "#/components/schemas/JSONSchema",
                "description": "If this is a JSON schema, it describes any additional properties."
              }
            ]
          },
          "title": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "description": "A short title of the instance.\n\nThis is used in various places inside Appsemble Studio.\n"
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "maxLength": 5000,
            "description": "A description of the instance.\n\nThis is used in various places inside Appsemble Studio.\n"
          }
        }
      },
      "JSONSchemaOneOf": {
        "type": "object",
        "description": "A JSON schema which determines the value must match exactly one of the given schemas.",
        "additionalProperties": false,
        "required": [
          "oneOf"
        ],
        "properties": {
          "oneOf": {
            "type": "array",
            "description": "The JSON schema must match exactly one of the given schemas.",
            "items": {
              "$ref": "#/components/schemas/JSONSchema"
            }
          },
          "example": {
            "description": "An example value which is valid according to this schema."
          },
          "default": {
            "description": "The default value which is used if no value is supplied."
          },
          "title": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "description": "A short title of the instance.\n\nThis is used in various places inside Appsemble Studio.\n"
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "maxLength": 5000,
            "description": "A description of the instance.\n\nThis is used in various places inside Appsemble Studio.\n"
          }
        }
      },
      "JSONSchemaRemapper": {
        "type": "object",
        "description": "A JSON schema which allows a format of remapper without a type.",
        "additionalProperties": false,
        "required": [
          "format"
        ],
        "properties": {
          "format": {
            "enum": [
              "remapper"
            ],
            "description": "Allow a remapper definition. This is supported for blocks only."
          },
          "default": {
            "$ref": "#/components/schemas/RemapperDefinition"
          },
          "title": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "description": "A short title of the instance.\n\nThis is used in various places inside Appsemble Studio.\n"
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "maxLength": 5000,
            "description": "A description of the instance.\n\nThis is used in various places inside Appsemble Studio.\n"
          }
        }
      },
      "JSONSchemaRoot": {
        "type": "object",
        "description": "A top level JSON schema.",
        "additionalProperties": false,
        "properties": {
          "definitions": {
            "description": "This property may be used to store JSON schemas that may be referenced from other places.",
            "additionalProperties": {
              "$ref": "#/components/schemas/JSONSchema"
            }
          },
          "$schema": {
            "description": "The JSON schema meta schema. You probably donâ€™t need to specify this explicitly.",
            "enum": [
              "http://json-schema.org/draft-04/schema#",
              "http://json-schema.org/draft-07/schema#"
            ],
            "default": "http://json-schema.org/draft-07/schema#"
          },
          "type": {
            "enum": [
              "object"
            ],
            "description": "The type of the JSON schema."
          },
          "example": {
            "type": "object",
            "description": "An example object which is valid according to this schema.",
            "additionalProperties": true
          },
          "default": {
            "type": "object",
            "description": "The default value which is used if no value is supplied.",
            "additionalProperties": true
          },
          "maxProperties": {
            "type": "integer",
            "description": "The maximum number of properties the object is allowed to have.",
            "minimum": 0
          },
          "minProperties": {
            "type": "integer",
            "description": "The minimum number of properties the object is must have.",
            "minimum": 1
          },
          "required": {
            "type": "array",
            "description": "A list of properties that are required.",
            "minItems": 1,
            "items": {
              "type": "string",
              "description": "A property name which is required on the object."
            }
          },
          "properties": {
            "type": "object",
            "description": "A mapping of object keys for the object to nested JSON schemas.",
            "additionalProperties": {
              "$ref": "#/components/schemas/JSONSchema"
            }
          },
          "additionalProperties": {
            "description": "Describe if this object is allowed to have properties besides those defined in `properties`\n\nItâ€™s recommended to set this to `false`.\n",
            "example": false,
            "anyOf": [
              {
                "type": "boolean",
                "description": "If false, the object may not have any additional properties.\n\nIf true, the object may have **any** type of additional properties. This is **not** recommended.\n"
              },
              {
                "$ref": "#/components/schemas/JSONSchema",
                "description": "If this is a JSON schema, it describes any additional properties."
              }
            ]
          },
          "title": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "description": "A short title of the instance.\n\nThis is used in various places inside Appsemble Studio.\n"
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "maxLength": 5000,
            "description": "A description of the instance.\n\nThis is used in various places inside Appsemble Studio.\n"
          }
        },
        "required": [
          "type",
          "additionalProperties"
        ]
      },
      "JSONSchemaString": {
        "type": "object",
        "description": "A JSON schema for a string.",
        "additionalProperties": false,
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "enum": [
              "string"
            ],
            "description": "The type of the JSON schema. A string is the technical term for a piece of text."
          },
          "example": {
            "type": "string",
            "description": "An example string which is valid according to this schema."
          },
          "default": {
            "type": "string",
            "description": "The default value which is used if no value is supplied."
          },
          "enum": {
            "type": "array",
            "description": "If an enum is specified, the type can be safely removed.",
            "items": {
              "type": "string"
            }
          },
          "const": {
            "type": "string",
            "description": "If const is specified, the type can be safely removed."
          },
          "format": {
            "enum": [
              "date-time",
              "time",
              "date",
              "duration",
              "email",
              "idn-email",
              "hostname",
              "idn-hostname",
              "ipv4",
              "ipv6",
              "uuid",
              "uri",
              "uri-reference",
              "iri",
              "iri-reference",
              "uri-template",
              "json-pointer",
              "relative-json-pointer",
              "regex",
              "action",
              "binary",
              "event-emitter",
              "event-listener",
              "fontawesome"
            ],
            "description": "The format values should adhere to."
          },
          "minLength": {
            "type": "integer",
            "description": "The minimum length of the string.",
            "minimum": 1
          },
          "maxLength": {
            "type": "integer",
            "description": "The maximum length of the string.\n\nItâ€™s highly recommended to set this property, even if itâ€™s a big number. For example 5000 characters\nis plenty for most larger input fields. Not doing so may result in extremely large user input, which\nresults in a bad user experience.\n",
            "minimum": 1,
            "example": 5000
          },
          "pattern": {
            "type": "string",
            "description": "A regular expression to describe user input.\n\nRegular expressions are a powerful way to enforce proper user input, but the learning curve is high.\nIf you donâ€™t know what this is, we recommend to omit this field for now.\n",
            "minLength": 1,
            "format": "regex"
          },
          "multiline": {
            "type": "boolean",
            "description": "If true, Appsemble renders a textarea in the graphical JSON editor.",
            "default": false
          },
          "title": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "description": "A short title of the instance.\n\nThis is used in various places inside Appsemble Studio.\n"
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "maxLength": 5000,
            "description": "A description of the instance.\n\nThis is used in various places inside Appsemble Studio.\n"
          }
        }
      },
      "JSONSchema": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/JSONPointer"
          },
          {
            "$ref": "#/components/schemas/JSONSchemaAnyOf"
          },
          {
            "$ref": "#/components/schemas/JSONSchemaArray"
          },
          {
            "$ref": "#/components/schemas/JSONSchemaBoolean"
          },
          {
            "$ref": "#/components/schemas/JSONSchemaConst"
          },
          {
            "$ref": "#/components/schemas/JSONSchemaEnum"
          },
          {
            "$ref": "#/components/schemas/JSONSchemaInteger"
          },
          {
            "$ref": "#/components/schemas/JSONSchemaMultiType"
          },
          {
            "$ref": "#/components/schemas/JSONSchemaNot"
          },
          {
            "$ref": "#/components/schemas/JSONSchemaNull"
          },
          {
            "$ref": "#/components/schemas/JSONSchemaNumber"
          },
          {
            "$ref": "#/components/schemas/JSONSchemaObject"
          },
          {
            "$ref": "#/components/schemas/JSONSchemaOneOf"
          },
          {
            "$ref": "#/components/schemas/JSONSchemaRemapper"
          },
          {
            "$ref": "#/components/schemas/JSONSchemaString"
          }
        ]
      },
      "LinkActionDefinition": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "to"
        ],
        "properties": {
          "type": {
            "enum": [
              "link"
            ],
            "description": "The link action can be used to redirect the user to other pages or absolute URLs."
          },
          "to": {
            "description": "The name of the page to link to. Subpages can be referred to using arrays. If this matches with an absolute URL, link will open this instead of matching it with a page or subpage.",
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "remapBefore": {},
          "remapAfter": {},
          "onSuccess": {},
          "onError": {}
        }
      },
      "LinkBackActionDefinition": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "enum": [
              "link.back"
            ],
            "description": "Link back to the previous page in the browser history."
          },
          "remapBefore": {},
          "remapAfter": {},
          "onSuccess": {},
          "onError": {}
        }
      },
      "LinkNextActionDefinition": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "enum": [
              "link.next"
            ],
            "description": "Link to the next page in the browser history."
          },
          "remapBefore": {},
          "remapAfter": {},
          "onSuccess": {},
          "onError": {}
        }
      },
      "LogActionDefinition": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "enum": [
              "log"
            ],
            "description": "Output the result of the action into the console.\n\nThis is mostly useful for debugging blocks during development.\n"
          },
          "level": {
            "enum": [
              "error",
              "info",
              "warn"
            ],
            "default": "info",
            "description": "The logging level on which to log."
          },
          "remapBefore": {},
          "remapAfter": {},
          "onSuccess": {},
          "onError": {}
        }
      },
      "Member": {
        "type": "object",
        "description": "A member of an organization.",
        "required": [
          "id"
        ],
        "additionalProperties": false,
        "properties": {
          "id": {
            "$ref": "#/components/schemas/User/properties/id"
          },
          "name": {
            "$ref": "#/components/schemas/User/properties/name"
          },
          "primaryEmail": {
            "type": "string",
            "format": "email",
            "description": "The primary email address of the user."
          },
          "role": {
            "enum": [
              "Member",
              "Translator",
              "APIReader",
              "APIUser",
              "AppEditor",
              "Maintainer",
              "Owner"
            ]
          },
          "properties": {
            "type": "object",
            "description": "Additional custom properties that a user might have.",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "MessageActionDefinition": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "body"
        ],
        "properties": {
          "type": {
            "enum": [
              "message"
            ],
            "description": "Display a message to the user.\n\nThis is useful in combination with action chaining to notify users they have performed a certain action.\n"
          },
          "body": {
            "$ref": "#/components/schemas/RemapperDefinition",
            "description": "The body of the message."
          },
          "color": {
            "enum": [
              "dark",
              "primary",
              "link",
              "success",
              "info",
              "warning",
              "danger"
            ],
            "default": "info",
            "description": "The Bulma color to apply to the message."
          },
          "dismissable": {
            "type": "boolean",
            "description": "Boolean value indicating whether the user is able to dismiss the message manually."
          },
          "timeout": {
            "type": "integer",
            "default": 5000,
            "description": "The time in milliseconds how long the message should be visible."
          },
          "remapBefore": {},
          "remapAfter": {},
          "onSuccess": {},
          "onError": {}
        }
      },
      "NoopActionDefinition": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "enum": [
              "noop"
            ],
            "description": "Do nothing when this action is triggered.\n\nThis is the default action for block actions that are not required.\n"
          },
          "remapBefore": {},
          "remapAfter": {},
          "onSuccess": {},
          "onError": {}
        }
      },
      "NotificationHookDataDefinition": {
        "type": "object",
        "description": "The data used to display the content of the notification.",
        "additionalProperties": true,
        "minProperties": 1,
        "properties": {
          "title": {
            "$ref": "#/components/schemas/RemapperDefinition",
            "description": "The title of the notification."
          },
          "content": {
            "$ref": "#/components/schemas/RemapperDefinition",
            "description": "The body of the notification."
          },
          "link": {
            "type": "string",
            "description": "The URL of the page the user gets redirected to after being clicked.\n\nIf the URL is relative, it will be relative to the app.\n"
          }
        }
      },
      "NotificationHookDefinition": {
        "type": "object",
        "description": "The strategy used to notify users.",
        "additionalProperties": false,
        "minProperties": 1,
        "properties": {
          "to": {
            "type": "array",
            "description": "The list of roles to notify.\n\nAside from roles, `$author` can also be used to notify the author of the resource.\n",
            "minItems": 1,
            "items": {
              "type": "string"
            }
          },
          "subscribe": {
            "description": "If set, allows users to manually subscribe for notifications for this resource regardless of roles.\n\nThe following values are allowed:\n- `all`: Allows users to be notified about actions on all of the resources of this type.\n- `single`: Allows users to be notified about actions a single instance of a resource of this\n  type.\n- `both`: Allows users to be notified about all resources or a single resource of this type.\n",
            "enum": [
              "all",
              "single",
              "both"
            ]
          },
          "data": {
            "$ref": "#/components/schemas/NotificationHookDataDefinition"
          }
        }
      },
      "OAuth2AuthorizationCode": {
        "type": "object",
        "description": "OAuth2 client credentials",
        "required": [
          "code"
        ],
        "additionalProperties": false,
        "properties": {
          "code": {
            "type": "string",
            "description": "The OAuth2 authorization code.",
            "readOnly": true
          }
        }
      },
      "OAuth2ClientCredentials": {
        "type": "object",
        "description": "OAuth2 client credentials",
        "required": [
          "description",
          "scopes"
        ],
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "The generated client id",
            "readOnly": true
          },
          "secret": {
            "type": "string",
            "description": "The generated client secret",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "A description for the user to recognize the client.",
            "maxLength": 50
          },
          "expires": {
            "type": "string",
            "description": "When the client credentials expire automatically.",
            "format": "date-time"
          },
          "scopes": {
            "type": "array",
            "description": "The scopes that have been granted to the client.",
            "items": {
              "enum": [
                "apps:write",
                "blocks:write",
                "organizations:write",
                "resources:read",
                "resources:write",
                "assets:write",
                "teams:read",
                "teams:write"
              ]
            }
          }
        }
      },
      "ObjectRemapperDefinition": {
        "type": "object",
        "description": "An object based remapper is defined by a specific implementation\n\nObject based remappers may only define 1 key. The allowed value depends on the remapper.\n",
        "minProperties": 1,
        "maxProperties": 1,
        "additionalProperties": false,
        "properties": {
          "app": {
            "enum": [
              "id",
              "locale",
              "url"
            ],
            "description": "Get app metadata.\n\nSupported properties:\n\n- `id`: Get the app id.\n- `locale`: Get the current locale of the app.\n- `url`: Get the base URL of the app.\n"
          },
          "array": {
            "enum": [
              "index",
              "length"
            ],
            "description": "Get the current array.mapâ€™s index or length.\n\nReturns nothing when not in the context of `array.mapâ€™s`.\n"
          },
          "array.map": {
            "$ref": "#/components/schemas/RemapperDefinition",
            "description": "Build an array based on the given data and remappers.\n\nThe remappers gets applied to each item in the array.\n\nAlways returns an array, can be empty if supplied data isnâ€™t an array.\n"
          },
          "array.unique": {
            "$ref": "#/components/schemas/RemapperDefinition",
            "description": "Filters out unique entries from an array.\n\nThe value Remapper is applied to each entry in the array,\nusing its result to determine uniqueness.\n\nIf the value Remapper result in `undefined` or `null`, the entire entry is used for uniqueness.\n\nIf the input is not an array, the input is returned without any modifications."
          },
          "context": {
            "type": "string",
            "description": "Get a property from the context."
          },
          "date.add": {
            "type": "string",
            "description": "Add the specified value to a given date."
          },
          "date.now": {
            "enum": [
              null
            ],
            "description": "Returns the current date."
          },
          "date.parse": {
            "type": "string",
            "description": "Convert a string to a date using a given format."
          },
          "equals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RemapperDefinition"
            },
            "description": "Compare all computed remapper values against each other.\n\nReturns `true` if all entries are equal, otherwise `false`.\n"
          },
          "gt": {
            "type": "array",
            "description": "Compare the first computed remapper value with the second computed remapper value.\n\nReturns `true` if the first entry is greater than the second entry.",
            "minItems": 2,
            "maxItems": 2,
            "items": {
              "$ref": "#/components/schemas/RemapperDefinition"
            }
          },
          "ics": {
            "type": "object",
            "description": "Create a calendar event",
            "additionalProperties": false,
            "required": [
              "start",
              "title"
            ],
            "properties": {
              "start": {
                "$ref": "#/components/schemas/RemapperDefinition",
                "description": "The start of the icalendar event."
              },
              "end": {
                "$ref": "#/components/schemas/RemapperDefinition",
                "description": "The end of the icalendar event."
              },
              "duration": {
                "$ref": "#/components/schemas/RemapperDefinition",
                "description": "The duration of the event.",
                "example": "1w 3d 10h 30m"
              },
              "title": {
                "$ref": "#/components/schemas/RemapperDefinition",
                "description": "The title of the event."
              },
              "description": {
                "$ref": "#/components/schemas/RemapperDefinition",
                "description": "An optional description of the event."
              },
              "url": {
                "$ref": "#/components/schemas/RemapperDefinition",
                "description": "An optional link to attach to the event."
              },
              "location": {
                "$ref": "#/components/schemas/RemapperDefinition",
                "description": "An optional location description to attach to the event."
              },
              "coordinates": {
                "$ref": "#/components/schemas/RemapperDefinition",
                "description": "An optional geolocation description to attach to the event.\n\nThis must be an object with the properties `lat` or `latitude`, and `lon`, `lng` or `longitude`."
              }
            }
          },
          "if": {
            "type": "object",
            "description": "Check if condition results in a truthy value.\n\nReturns value of then if condition is truthy, otherwise it returns the value of else.\n",
            "additionalProperties": false,
            "required": [
              "condition",
              "then",
              "else"
            ],
            "properties": {
              "condition": {
                "$ref": "#/components/schemas/RemapperDefinition",
                "description": "The condition to check."
              },
              "then": {
                "$ref": "#/components/schemas/RemapperDefinition",
                "description": "This remapper is used if the condition returns true."
              },
              "else": {
                "$ref": "#/components/schemas/RemapperDefinition",
                "description": "This remapper is used if the condition returns false."
              }
            }
          },
          "lt": {
            "type": "array",
            "description": "Compare the first computed remapper value with the second computed remapper value.\n\nReturns `true` if the first entry is lesser than the second entry.",
            "minItems": 2,
            "maxItems": 2,
            "items": {
              "$ref": "#/components/schemas/RemapperDefinition"
            }
          },
          "null.strip": {
            "description": "Strip all null, undefined, and empty array values from an object.",
            "anyOf": [
              {
                "enum": [
                  null
                ]
              },
              {
                "type": "object",
                "required": [
                  "depth"
                ],
                "additionalProperties": false,
                "description": "Options for the null.strip remapper.",
                "properties": {
                  "depth": {
                    "type": "integer",
                    "minimum": 1,
                    "description": "How deep to recurse into objects and arrays to remove null values."
                  }
                }
              }
            ]
          },
          "object.assign": {
            "description": "Assign properties to an existing object given some predefined mapper keys.",
            "additionalProperties": {
              "$ref": "#/components/schemas/RemapperDefinition"
            }
          },
          "object.from": {
            "description": "Create a new object given some predefined mapper keys.",
            "additionalProperties": {
              "$ref": "#/components/schemas/RemapperDefinition"
            }
          },
          "object.omit": {
            "description": "Remove properties from an existing object based on the given the object keys.\n\nNested properties can be removed using arrays of keys.\n\nFor example:\n```yaml\nobject.omit:\n  - foo   # Removes the property foo\n  - - bar # Removes the property baz inside of bar\n    - baz\n```\n",
            "type": "array",
            "items": {
              "minItems": 1,
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "minItems": 2,
                  "items": {
                    "type": "string"
                  }
                }
              ]
            }
          },
          "page": {
            "enum": [
              "data",
              "url"
            ],
            "description": "Get page metadata.\n\nSupported properties:\n\n- `data`: Get the current page data.\n- `url`: Get the URL of the current page.\n"
          },
          "prop": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "integer"
              },
              {
                "type": "array",
                "minItems": 1,
                "items": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "integer"
                    }
                  ]
                }
              }
            ],
            "description": "Get a property from an object."
          },
          "random.choice": {
            "enum": [
              null
            ],
            "description": "Pick and return a random entry from an array. If the input is not an array, the input is returned as-is."
          },
          "random.integer": {
            "type": "array",
            "maxItems": 2,
            "minItems": 2,
            "items": {
              "type": "integer"
            },
            "description": "Pick and return a random integer between the provided lowest and highest values."
          },
          "random.float": {
            "type": "array",
            "maxItems": 2,
            "minItems": 2,
            "items": {
              "type": "number"
            },
            "description": "Pick and return a random number between the provided lowest and highest values."
          },
          "random.string": {
            "type": "object",
            "required": [
              "choice",
              "length"
            ],
            "additionalProperties": false,
            "properties": {
              "choice": {
                "type": "string",
                "minLength": 1
              },
              "length": {
                "type": "integer",
                "minimum": 1
              }
            },
            "description": "Pick and return a random string from a given length using characters from a given input string."
          },
          "root": {
            "enum": [
              null
            ],
            "description": "Get the input data as it was initially passed to the remap function."
          },
          "static": {
            "description": "Use a static value."
          },
          "string.case": {
            "enum": [
              "lower",
              "upper"
            ],
            "description": "Convert an input to lower or upper case."
          },
          "string.format": {
            "type": "object",
            "description": "Format a string using remapped input variables.",
            "additionalProperties": false,
            "properties": {
              "messageId": {
                "type": "string",
                "description": "The message id pointing to the template string to format."
              },
              "template": {
                "type": "string",
                "description": "The template default string to format."
              },
              "values": {
                "description": "A set of remappers to convert the input to usable values.",
                "additionalProperties": {
                  "$ref": "#/components/schemas/RemapperDefinition"
                }
              }
            }
          },
          "string.replace": {
            "type": "object",
            "description": "Match the content with the regex in the key, and replace it with its value.",
            "minProperties": 1,
            "maxProperties": 1,
            "additionalProperties": {
              "type": "string"
            }
          },
          "translate": {
            "type": "string",
            "description": "Translate using a messageID.\n\nThis does not support parameters, for more nuanced translations use `string.format`.\n"
          },
          "user": {
            "enum": [
              "sub",
              "name",
              "email",
              "email_verified",
              "picture",
              "profile",
              "locale"
            ],
            "description": "Get a user property from the OpenID user info."
          }
        }
      },
      "Organization": {
        "type": "object",
        "description": "An organization groups a set of users, apps, themes, and permissions together",
        "required": [
          "id"
        ],
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^([\\da-z](?:(?!.*--)[\\da-z-]*[\\da-z])?)$",
            "minLength": 1,
            "maxLength": 30,
            "description": "The unique identifier for the organization."
          },
          "name": {
            "type": "string",
            "description": "The display name for the organization."
          },
          "description": {
            "type": "string",
            "description": "The description of the organization.",
            "maxLength": 160
          },
          "email": {
            "type": "string",
            "description": "The email address of the organization."
          },
          "website": {
            "type": "string",
            "description": "The website of the organization."
          },
          "iconUrl": {
            "type": "string",
            "description": "The URL used to fetch the organizationâ€™s icon."
          }
        }
      },
      "PageDefinition": {
        "type": "object",
        "additionalProperties": false,
        "description": "The list of blocks that are displayed on the page.\n\nEach page requires at least one block. Blocks are displayed in the order that they are defined in\nthe list.\n",
        "required": [
          "blocks",
          "name"
        ],
        "properties": {
          "blocks": {
            "type": "array",
            "minItems": 1,
            "description": "The blocks that make up a page.",
            "items": {
              "$ref": "#/components/schemas/BlockDefinition"
            }
          },
          "name": {
            "type": "string",
            "maxLength": 50,
            "description": "The name of an app.\n\nThis field is always required and must be unique within the app, meaning that it is not possible to\nhave two pages with the same name. The name of the page is displayed at the top of each page as well\nas in the side navigational menu.\n\n> **Note**: The URL used to navigate to pages is determined by this property.\n"
          },
          "navTitle": {
            "$ref": "#/components/schemas/RemapperDefinition",
            "description": "The name of the page when displayed in the navigation menu.\n\nContext property `name` can be used to access the name of the page.\n"
          },
          "icon": {
            "type": "string",
            "description": "An optional icon from the fontawesome icon set\n\nThis will be displayed in the navigation menu.\n"
          },
          "parameters": {
            "type": "array",
            "description": "Page parameters can be used for linking to a page that should display a single resource.\n\nThis defined as a list of strings representing the properties to pass through. More often than not\npassing `id` through is sufficient, depending on the block.\n",
            "items": {
              "type": "string",
              "minLength": 1,
              "maxLength": 30
            }
          },
          "roles": {
            "type": "array",
            "description": "The list of roles that are allowed to view this page.\n\nIf the user doesnâ€™t have any of the roles in the list the page will be unavailable to them. An empty\nlist can be used to specify that users need to log in but do not need a specific role.\n\nUsers trying to visit a page without having the correct roles will be redirected to the first page\nthat they are allowed to view. If there arenâ€™t any accessible pages, the user will be logged out and\ninstructed to contact the app owner to get permissions.\n",
            "items": {
              "type": "string"
            }
          },
          "theme": {
            "$ref": "#/components/schemas/Theme"
          },
          "navigation": {
            "$ref": "#/components/schemas/AppLayoutDefinition/properties/navigation",
            "description": "The type of navigation displayed on the page.\n\nThis overrides the navigation property of the app itself. Defaults to `left-menu` if navigation or\nApp navigation are not set.\n\nSet to `bottom` to use a navigation pane at the bottom of the screen instead of the default side\nmenu. Set to `hidden` to display no navigational menus at all.\n"
          },
          "hideFromMenu": {
            "type": "boolean",
            "description": "Whether or not the page should be displayed in navigational menus.\n\nBy default all pages without parameters are added to navigational menus. Set to `true` to hide the\npage from menus.\n",
            "default": false
          }
        }
      },
      "Rating": {
        "type": "object",
        "description": "A representation of an App rating.",
        "additionalProperties": false,
        "required": [
          "rating"
        ],
        "properties": {
          "rating": {
            "type": "number",
            "minimum": 1,
            "maximum": 5,
            "description": "A value ranging from 1 to 5 stars rating of the App."
          },
          "description": {
            "type": "string",
            "description": "An optional explanation of the given rating."
          },
          "name": {
            "$ref": "#/components/schemas/User/properties/name",
            "readOnly": true,
            "description": "The name of the user who submitted the rating."
          }
        }
      },
      "RemapperDefinition": {
        "anyOf": [
          {
            "type": "boolean",
            "description": "A boolean remapper is always returned directly."
          },
          {
            "enum": [
              null
            ],
            "description": "A null remapper is always returned directly."
          },
          {
            "type": "number",
            "description": "A numeric remapper is always returned directly."
          },
          {
            "type": "string",
            "description": "A string remapper is always returned directly."
          },
          {
            "$ref": "#/components/schemas/ObjectRemapperDefinition"
          },
          {
            "type": "array",
            "description": "If a remapper is an array, it represents a chain of remappers.\n\nEach item represents a remapper which is called with the result of the remapper before it.\n",
            "items": {
              "$ref": "#/components/schemas/ObjectRemapperDefinition"
            }
          }
        ]
      },
      "RequestActionDefinition": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "url"
        ],
        "properties": {
          "type": {
            "enum": [
              "request"
            ],
            "description": "Performs an HTTP request.\n\nThis can be used to call the Appsemble API or an external API in order to fetch data or send data.\nWhen sending `POST`, `PUT`, `DELETE` and `PATCH` calls the data that is currently available\nin the block gets passed through.\n\nIf the content type of the request is `text/xml` or `application/xml`, the data will be\nconverted to JSON.\n"
          },
          "url": {
            "$ref": "#/components/schemas/RemapperDefinition",
            "description": "A remapper that results in the URL to send the request to.\n\nCan be a relative URL (E.g. `/api/health`) for usage with the Appsemble API, or an absolute URL\n(E.g. `https://example.com`) for usage with external sites."
          },
          "method": {
            "enum": [
              "delete",
              "get",
              "patch",
              "post",
              "put"
            ],
            "default": "get",
            "description": "The type of request to make."
          },
          "query": {
            "$ref": "#/components/schemas/RemapperDefinition",
            "description": "A remapper that results in either an object containing each property of the query string, or a string that gets passed through as-is."
          },
          "body": {
            "$ref": "#/components/schemas/RemapperDefinition",
            "description": "remapper that results in the request body to send.\n\nIf not specified, the raw input data is used.\n"
          },
          "proxy": {
            "type": "boolean",
            "default": "false",
            "description": "By default requests will be proxied through the Appsemble API.\n\nThis allows to protect user data and ensures\n[CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) is enabled. This behavior can be\ndisabled by setting this to `false`\n"
          },
          "schema": {
            "description": "The name of the schema to validate against before submitting data.",
            "$ref": "#/components/schemas/JSONSchema"
          },
          "remapBefore": {},
          "remapAfter": {},
          "onSuccess": {},
          "onError": {}
        }
      },
      "ResourceCountActionDefinition": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "resource"
        ],
        "properties": {
          "type": {
            "enum": [
              "resource.count"
            ],
            "description": "Count the number of resources a similar `resource.query` action would return."
          },
          "resource": {
            "type": "string",
            "description": "The type of the resource to count."
          },
          "method": {
            "enum": [
              "delete",
              "get",
              "patch",
              "post",
              "put"
            ],
            "default": "get",
            "description": "The type of request to make."
          },
          "query": {
            "$ref": "#/components/schemas/RemapperDefinition",
            "description": "A remapper that results in either an object containing each property of the query string, or a string that gets passed through as-is."
          },
          "body": {
            "$ref": "#/components/schemas/RemapperDefinition",
            "description": "remapper that results in the request body to send.\n\nIf not specified, the raw input data is used.\n"
          },
          "proxy": {
            "type": "boolean",
            "default": "false",
            "description": "By default requests will be proxied through the Appsemble API.\n\nThis allows to protect user data and ensures\n[CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) is enabled. This behavior can be\ndisabled by setting this to `false`\n"
          },
          "schema": {
            "description": "The name of the schema to validate against before submitting data.",
            "$ref": "#/components/schemas/JSONSchema"
          },
          "remapBefore": {},
          "remapAfter": {},
          "onSuccess": {},
          "onError": {}
        }
      },
      "ResourceCreateActionDefinition": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "resource"
        ],
        "properties": {
          "type": {
            "enum": [
              "resource.create"
            ],
            "description": "Create a resource."
          },
          "resource": {
            "type": "string",
            "description": "The type of the resource to create."
          },
          "method": {
            "enum": [
              "delete",
              "get",
              "patch",
              "post",
              "put"
            ],
            "default": "get",
            "description": "The type of request to make."
          },
          "query": {
            "$ref": "#/components/schemas/RemapperDefinition",
            "description": "A remapper that results in either an object containing each property of the query string, or a string that gets passed through as-is."
          },
          "body": {
            "$ref": "#/components/schemas/RemapperDefinition",
            "description": "remapper that results in the request body to send.\n\nIf not specified, the raw input data is used.\n"
          },
          "proxy": {
            "type": "boolean",
            "default": "false",
            "description": "By default requests will be proxied through the Appsemble API.\n\nThis allows to protect user data and ensures\n[CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) is enabled. This behavior can be\ndisabled by setting this to `false`\n"
          },
          "schema": {
            "description": "The name of the schema to validate against before submitting data.",
            "$ref": "#/components/schemas/JSONSchema"
          },
          "remapBefore": {},
          "remapAfter": {},
          "onSuccess": {},
          "onError": {}
        }
      },
      "ResourceDefinition": {
        "type": "object",
        "additionalProperties": false,
        "description": "A definition of how this resource works.",
        "required": [
          "schema"
        ],
        "properties": {
          "expires": {
            "type": "string",
            "description": "A time string representing when a resource should expire.\n\nExample: 1d 8h 30m\n",
            "pattern": "^(\\d+(y|yr|years))?\\s*(\\d+months)?\\s*(\\d+(w|wk|weeks))?\\s*(\\d+(d|days))?\\s*(\\d+(h|hr|hours))?\\s*(\\d+(m|min|minutes))?\\s*(\\d+(s|sec|seconds))?$"
          },
          "schema": {
            "$ref": "#/components/schemas/JSONSchemaRoot",
            "description": "JSON schema definitions that may be used by the app."
          },
          "references": {
            "type": "object",
            "description": "References to other resources.\n\nThe key is the property that references the other resource. The value is an object describing the\nname of the resource and how it should behave.\n",
            "minProperties": 1,
            "additionalProperties": {
              "type": "object",
              "description": "A reference to between two resource types.",
              "additionalProperties": false,
              "properties": {
                "resource": {
                  "type": "string"
                },
                "create": {
                  "type": "object",
                  "additionalProperties": false,
                  "description": "To be documented.",
                  "properties": {
                    "trigger": {
                      "type": "array",
                      "items": {
                        "enum": [
                          "create",
                          "update",
                          "delete"
                        ]
                      },
                      "minItems": 1,
                      "uniqueItems": true
                    }
                  }
                },
                "update": {
                  "type": "object",
                  "additionalProperties": false,
                  "description": "To be documented.",
                  "properties": {
                    "trigger": {
                      "type": "array",
                      "items": {
                        "enum": [
                          "create",
                          "update",
                          "delete"
                        ]
                      },
                      "minItems": 1,
                      "uniqueItems": true
                    }
                  }
                },
                "delete": {
                  "type": "object",
                  "additionalProperties": false,
                  "description": "To be documented.",
                  "properties": {
                    "trigger": {
                      "type": "array",
                      "items": {
                        "enum": [
                          "create",
                          "update",
                          "delete"
                        ]
                      },
                      "minItems": 1,
                      "uniqueItems": true
                    }
                  }
                }
              }
            }
          },
          "roles": {
            "type": "array",
            "description": "The default roles that are allowed to perform all actions.",
            "items": {
              "type": "string"
            }
          },
          "url": {
            "type": "string",
            "default": "/api/apps/{appId}/{resource}",
            "description": "URL to use if not otherwise specified."
          },
          "id": {
            "type": "string",
            "default": "id",
            "description": "Name of the field used when accessing singular entities."
          },
          "history": {
            "description": "A definition of how versioning should happen for instances of this resource.",
            "default": false,
            "oneOf": [
              {
                "type": "boolean",
                "description": "Setting this to `true` is the same as using an object with the property `data` set to `true`."
              },
              {
                "$ref": "#/components/schemas/ResourceHistoryDefinition"
              }
            ]
          },
          "query": {
            "type": "object",
            "description": "Overrides for 'query' requests.",
            "additionalProperties": false,
            "properties": {
              "roles": {
                "type": "array",
                "description": "The list of roles that are allowed to use this action.\n\nThis will override the default roles that are assigned.\n",
                "items": {
                  "type": "string"
                }
              },
              "query": {
                "type": "object",
                "description": "The query parameters to use in the request.",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "method": {
                "type": "string",
                "default": "GET",
                "description": "HTTP method to use for this type of request."
              },
              "url": {
                "type": "string",
                "default": "/api/apps/{appId}/{resource}",
                "description": "URL to use for this type of request."
              }
            }
          },
          "get": {
            "type": "object",
            "description": "Overrides for 'get' requests.",
            "additionalProperties": false,
            "properties": {
              "roles": {
                "type": "array",
                "description": "The list of roles that are allowed to use this action.\n\nThis will override the default roles that are assigned.\n",
                "items": {
                  "type": "string"
                }
              },
              "query": {
                "type": "object",
                "description": "The query parameters to use in the request.",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "method": {
                "type": "string",
                "default": "GET",
                "description": "HTTP method to use for this type of request."
              },
              "url": {
                "type": "string",
                "default": "/api/apps/{appId}/{resource}/{id}",
                "description": "URL to use for this type of request."
              }
            }
          },
          "count": {
            "type": "object",
            "description": "Overrides for 'count' requests.",
            "additionalProperties": false,
            "properties": {
              "roles": {
                "type": "array",
                "description": "The list of roles that are allowed to use this action.\n\nThis will override the default roles that are assigned.\n",
                "items": {
                  "type": "string"
                }
              },
              "query": {
                "type": "object",
                "description": "The query parameters to use in the request.",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "method": {
                "type": "string",
                "default": "GET",
                "description": "HTTP method to use for this type of request."
              },
              "url": {
                "type": "string",
                "default": "/api/apps/{appId}/{resource}/$count",
                "description": "URL to use for this type of request."
              }
            }
          },
          "create": {
            "type": "object",
            "description": "Overrides for 'create' requests.",
            "additionalProperties": false,
            "properties": {
              "roles": {
                "type": "array",
                "description": "The list of roles that are allowed to use this action.\n\nThis will override the default roles that are assigned.\n",
                "items": {
                  "type": "string"
                }
              },
              "query": {
                "type": "object",
                "description": "The query parameters to use in the request.",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "method": {
                "type": "string",
                "default": "POST",
                "description": "HTTP method to use for this type of request."
              },
              "url": {
                "type": "string",
                "default": "/api/apps/{appId}/{resource}/{id}",
                "description": "URL to use for this type of request."
              },
              "hooks": {
                "$ref": "#/components/schemas/ResourceHooksDefinition"
              }
            }
          },
          "update": {
            "type": "object",
            "description": "Overrides for 'update' requests.",
            "additionalProperties": false,
            "properties": {
              "roles": {
                "type": "array",
                "description": "The list of roles that are allowed to use this action.\n\nThis will override the default roles that are assigned.\n",
                "items": {
                  "type": "string"
                }
              },
              "query": {
                "type": "object",
                "description": "The query parameters to use in the request.",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "method": {
                "type": "string",
                "default": "PUT",
                "description": "HTTP method to use for this type of request."
              },
              "url": {
                "type": "string",
                "default": "/api/apps/{appId}/{resource}/{id}",
                "description": "URL to use for this type of request."
              },
              "hooks": {
                "$ref": "#/components/schemas/ResourceHooksDefinition"
              }
            }
          },
          "delete": {
            "type": "object",
            "description": "Overrides for 'delete' requests.",
            "additionalProperties": false,
            "properties": {
              "roles": {
                "type": "array",
                "description": "The list of roles that are allowed to use this action.\n\nThis will override the default roles that are assigned.\n",
                "items": {
                  "type": "string"
                }
              },
              "query": {
                "type": "object",
                "description": "The query parameters to use in the request.",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "method": {
                "type": "string",
                "default": "DELETE",
                "description": "HTTP method to use for this type of request."
              },
              "url": {
                "type": "string",
                "default": "/api/apps/{appId}/{resource}/{id}",
                "description": "URL to use for this type of request."
              },
              "hooks": {
                "$ref": "#/components/schemas/ResourceHooksDefinition"
              }
            }
          },
          "views": {
            "$ref": "#/components/schemas/ResourceViewDefinition"
          }
        }
      },
      "ResourceDeleteActionDefinition": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "resource"
        ],
        "properties": {
          "type": {
            "enum": [
              "resource.delete"
            ],
            "description": "Delete a resource."
          },
          "resource": {
            "type": "string",
            "description": "The type of the resource to delete."
          },
          "method": {
            "enum": [
              "delete",
              "get",
              "patch",
              "post",
              "put"
            ],
            "default": "get",
            "description": "The type of request to make."
          },
          "query": {
            "$ref": "#/components/schemas/RemapperDefinition",
            "description": "A remapper that results in either an object containing each property of the query string, or a string that gets passed through as-is."
          },
          "body": {
            "$ref": "#/components/schemas/RemapperDefinition",
            "description": "remapper that results in the request body to send.\n\nIf not specified, the raw input data is used.\n"
          },
          "proxy": {
            "type": "boolean",
            "default": "false",
            "description": "By default requests will be proxied through the Appsemble API.\n\nThis allows to protect user data and ensures\n[CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) is enabled. This behavior can be\ndisabled by setting this to `false`\n"
          },
          "schema": {
            "description": "The name of the schema to validate against before submitting data.",
            "$ref": "#/components/schemas/JSONSchema"
          },
          "remapBefore": {},
          "remapAfter": {},
          "onSuccess": {},
          "onError": {}
        }
      },
      "ResourceGetActionDefinition": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "resource"
        ],
        "properties": {
          "type": {
            "enum": [
              "resource.get"
            ],
            "description": "Get a single resource."
          },
          "resource": {
            "type": "string",
            "description": "The type of the resource to get."
          },
          "view": {
            "type": "string",
            "description": "The view to use for the resource."
          },
          "method": {
            "enum": [
              "delete",
              "get",
              "patch",
              "post",
              "put"
            ],
            "default": "get",
            "description": "The type of request to make."
          },
          "query": {
            "$ref": "#/components/schemas/RemapperDefinition",
            "description": "A remapper that results in either an object containing each property of the query string, or a string that gets passed through as-is."
          },
          "body": {
            "$ref": "#/components/schemas/RemapperDefinition",
            "description": "remapper that results in the request body to send.\n\nIf not specified, the raw input data is used.\n"
          },
          "proxy": {
            "type": "boolean",
            "default": "false",
            "description": "By default requests will be proxied through the Appsemble API.\n\nThis allows to protect user data and ensures\n[CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) is enabled. This behavior can be\ndisabled by setting this to `false`\n"
          },
          "schema": {
            "description": "The name of the schema to validate against before submitting data.",
            "$ref": "#/components/schemas/JSONSchema"
          },
          "remapBefore": {},
          "remapAfter": {},
          "onSuccess": {},
          "onError": {}
        }
      },
      "ResourceHistoryDefinition": {
        "type": "object",
        "additionalProperties": false,
        "description": "A definition of how versioning works for instances of this resource",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "boolean",
            "default": true,
            "description": "If set to `false`, edits are still tracked, but exactly what changed is lost."
          }
        }
      },
      "ResourceHooksDefinition": {
        "type": "object",
        "description": "Hooks that are triggered upon calling a resource action.",
        "additionalProperties": false,
        "minProperties": 1,
        "properties": {
          "notification": {
            "$ref": "#/components/schemas/NotificationHookDefinition"
          }
        }
      },
      "ResourceQueryActionDefinition": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "resource"
        ],
        "properties": {
          "type": {
            "enum": [
              "resource.query"
            ],
            "description": "Query a list of resources."
          },
          "resource": {
            "type": "string",
            "description": "The type of the resource to query."
          },
          "view": {
            "type": "string",
            "description": "The view to use for the resource."
          },
          "method": {
            "enum": [
              "delete",
              "get",
              "patch",
              "post",
              "put"
            ],
            "default": "get",
            "description": "The type of request to make."
          },
          "query": {
            "$ref": "#/components/schemas/RemapperDefinition",
            "description": "A remapper that results in either an object containing each property of the query string, or a string that gets passed through as-is."
          },
          "body": {
            "$ref": "#/components/schemas/RemapperDefinition",
            "description": "remapper that results in the request body to send.\n\nIf not specified, the raw input data is used.\n"
          },
          "proxy": {
            "type": "boolean",
            "default": "false",
            "description": "By default requests will be proxied through the Appsemble API.\n\nThis allows to protect user data and ensures\n[CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) is enabled. This behavior can be\ndisabled by setting this to `false`\n"
          },
          "schema": {
            "description": "The name of the schema to validate against before submitting data.",
            "$ref": "#/components/schemas/JSONSchema"
          },
          "remapBefore": {},
          "remapAfter": {},
          "onSuccess": {},
          "onError": {}
        }
      },
      "ResourceSubscriptionStatusActionDefinition": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "resource"
        ],
        "properties": {
          "type": {
            "enum": [
              "resource.subscription.status"
            ],
            "description": "Get the status of whether or not the user is subscriped to notifications for resource modifications."
          },
          "resource": {
            "type": "string",
            "description": "The type of the resource to get the subscription state for."
          },
          "action": {
            "enum": [
              "create",
              "delete",
              "update"
            ],
            "description": "The resource action type to get the subscription state for."
          },
          "remapBefore": {},
          "remapAfter": {},
          "onSuccess": {},
          "onError": {}
        }
      },
      "ResourceSubscriptionSubscribeActionDefinition": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "resource"
        ],
        "properties": {
          "type": {
            "enum": [
              "resource.subscription.subscribe"
            ],
            "description": "Subscribe to notifications on resource modifications."
          },
          "resource": {
            "type": "string",
            "description": "The type of the resource to subscribe to."
          },
          "action": {
            "enum": [
              "create",
              "delete",
              "update"
            ],
            "description": "The resource action type to subscribe to."
          },
          "remapBefore": {},
          "remapAfter": {},
          "onSuccess": {},
          "onError": {}
        }
      },
      "ResourceSubscriptionToggleActionDefinition": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "resource"
        ],
        "properties": {
          "type": {
            "enum": [
              "resource.subscription.toggle"
            ],
            "description": "Toggle whether or not to receive notifications on resource modifications."
          },
          "resource": {
            "type": "string",
            "description": "The type of the resource to toggle the subscription state for."
          },
          "action": {
            "enum": [
              "create",
              "delete",
              "update"
            ],
            "description": "The resource action type to toggle the subscription state for."
          },
          "remapBefore": {},
          "remapAfter": {},
          "onSuccess": {},
          "onError": {}
        }
      },
      "ResourceSubscription": {
        "type": "object",
        "additionalProperties": false,
        "description": "This describes how a user is subscribed to a resource.",
        "properties": {
          "create": {
            "type": "boolean",
            "description": "If true, the user is subscribed to any create actions for the resource type"
          },
          "update": {
            "type": "boolean",
            "description": "If true, the user is subscribed to any update actions for the resource type"
          },
          "delete": {
            "type": "boolean",
            "description": "If true, the user is subscribed to any delete actions for the resource type"
          },
          "subscriptions": {
            "type": "object",
            "description": "A mapping of resource IDs to individual resource subscriptions",
            "additionalProperties": {
              "type": "object",
              "description": "The subscription status of a user for a single resource.",
              "additionalProperties": false,
              "properties": {
                "update": {
                  "type": "boolean",
                  "description": "If true, the user is subscribed to update actions on this particular resource."
                },
                "delete": {
                  "type": "boolean",
                  "description": "If true, the user will be notified when this particular resource is deleted."
                }
              }
            }
          }
        }
      },
      "ResourceSubscriptionUnsubscribeActionDefinition": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "resource"
        ],
        "properties": {
          "type": {
            "enum": [
              "resource.subscription.unsubscribe"
            ],
            "description": "Unsubscribe from notifications on resource modifications."
          },
          "resource": {
            "type": "string",
            "description": "The type of the resource to unsubscribe from."
          },
          "action": {
            "enum": [
              "create",
              "delete",
              "update"
            ],
            "description": "The resource action type to unsubscribe from."
          },
          "remapBefore": {},
          "remapAfter": {},
          "onSuccess": {},
          "onError": {}
        }
      },
      "Resource": {
        "type": "object",
        "additionalProperties": true,
        "description": "A resource can be anything defined as described in an app resource definition.",
        "properties": {
          "id": {
            "type": "number",
            "readOnly": true
          },
          "$clonable": {
            "type": "boolean"
          },
          "$expires": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ResourceUpdateActionDefinition": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "resource"
        ],
        "properties": {
          "type": {
            "enum": [
              "resource.update"
            ],
            "description": "Update a resource."
          },
          "resource": {
            "type": "string",
            "description": "The type of the resource to query."
          },
          "method": {
            "enum": [
              "delete",
              "get",
              "patch",
              "post",
              "put"
            ],
            "default": "get",
            "description": "The type of request to make."
          },
          "query": {
            "$ref": "#/components/schemas/RemapperDefinition",
            "description": "A remapper that results in either an object containing each property of the query string, or a string that gets passed through as-is."
          },
          "body": {
            "$ref": "#/components/schemas/RemapperDefinition",
            "description": "remapper that results in the request body to send.\n\nIf not specified, the raw input data is used.\n"
          },
          "proxy": {
            "type": "boolean",
            "default": "false",
            "description": "By default requests will be proxied through the Appsemble API.\n\nThis allows to protect user data and ensures\n[CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) is enabled. This behavior can be\ndisabled by setting this to `false`\n"
          },
          "schema": {
            "description": "The name of the schema to validate against before submitting data.",
            "$ref": "#/components/schemas/JSONSchema"
          },
          "remapBefore": {},
          "remapAfter": {},
          "onSuccess": {},
          "onError": {}
        }
      },
      "ResourceViewDefinition": {
        "type": "object",
        "minProperties": 1,
        "description": "Alternative views of a resource that are modified using remappers and support different sets of roles.",
        "additionalProperties": {
          "type": "object",
          "additionalProperties": false,
          "description": "A custom view for a resource.",
          "properties": {
            "roles": {
              "type": "array",
              "description": "The list of roles that are allowed to use this view.",
              "items": {
                "type": "string"
              }
            },
            "remap": {
              "$ref": "#/components/schemas/RemapperDefinition",
              "description": "The modified view."
            }
          }
        }
      },
      "SecurityDefaultDefinition": {
        "type": "object",
        "required": [
          "role"
        ],
        "description": "The default role to apply to members.",
        "additionalProperties": false,
        "properties": {
          "policy": {
            "enum": [
              "everyone",
              "organization",
              "invite"
            ],
            "default": "everyone",
            "description": "How the `default` role gets applied to users.\n\nThe following values are allowed:\n- `everyone`: Every authenticated user gets the default role.\n- `organization`: Every authenticated user gets the default role if they are in the same organization as the app.\n- `invite`: The user has to manually get a role assigned.\n"
          },
          "role": {
            "type": "string",
            "description": "The default role to apply to members.\n\nThis must match with one of the roles defined within the security definition.\n"
          }
        }
      },
      "SecurityDefinition": {
        "type": "object",
        "description": "This describes how the app is secured.",
        "required": [
          "default",
          "roles"
        ],
        "additionalProperties": false,
        "properties": {
          "default": {
            "$ref": "#/components/schemas/SecurityDefaultDefinition"
          },
          "roles": {
            "type": "object",
            "description": "This property defines the user roles that are available within the app.",
            "minProperties": 1,
            "additionalProperties": {
              "$ref": "#/components/schemas/SecurityRoleDefinition"
            }
          },
          "teams": {
            "$ref": "#/components/schemas/TeamsDefinition",
            "description": "Define how teams are handled by the app."
          }
        }
      },
      "SecurityRoleDefinition": {
        "type": "object",
        "description": "This describes a security role.",
        "additionalProperties": false,
        "properties": {
          "description": {
            "type": "string",
            "description": "The description of the role."
          },
          "defaultPage": {
            "type": "string",
            "description": "The default page to redirect users with this role to."
          },
          "inherits": {
            "type": "array",
            "minItems": 1,
            "description": "The name of the role to inherit from.\n\nNote that this role must exist and can not inherit itself via this field or the `inherits` field\nof the referenced role.\n",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ShareActionDefinition": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "enum": [
              "share"
            ],
            "description": "The `share` action can be used to display a prompt that allows the user to share something with others, primarily via social media.\n\nDepending on whether the userâ€™s browser supports a native share function it will either display a\nnative dialog for sharing links, or display a more limited fallback in a dialog.\n"
          },
          "url": {
            "$ref": "#/components/schemas/RemapperDefinition",
            "description": "The url that is being shared."
          },
          "title": {
            "$ref": "#/components/schemas/RemapperDefinition",
            "description": "The title that should be shared."
          },
          "text": {
            "$ref": "#/components/schemas/RemapperDefinition",
            "description": "The main body that should be shared."
          },
          "remapBefore": {},
          "remapAfter": {},
          "onSuccess": {},
          "onError": {}
        }
      },
      "SSOConfiguration": {
        "type": "object",
        "description": "A single sign on configuration which is exposed to users.",
        "additionalProperties": false,
        "properties": {
          "url": {
            "type": "string",
            "format": "url",
            "description": "The URL users will be redirected to in the login process."
          },
          "name": {
            "type": "string",
            "description": "A user readable name for the configuration."
          },
          "icon": {
            "type": "string",
            "description": "A Font Awesome icon."
          }
        }
      },
      "StaticActionDefinition": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "value"
        ],
        "properties": {
          "type": {
            "enum": [
              "static"
            ],
            "description": "The `static` action returns static data defined in the action definition.\n\nThis is useful for example for stubbing data.\n"
          },
          "value": {
            "description": "The static value to return."
          },
          "remapBefore": {},
          "remapAfter": {},
          "onSuccess": {},
          "onError": {}
        }
      },
      "StorageReadActionDefinition": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "key"
        ],
        "properties": {
          "type": {
            "enum": [
              "storage.read"
            ],
            "description": "Read data from the appâ€™s local storage."
          },
          "key": {
            "$ref": "#/components/schemas/RemapperDefinition",
            "description": "The key of the storage entry."
          },
          "storage": {
            "enum": [
              "indexedDB",
              "localStorage",
              "sessionStorage"
            ],
            "description": "The mechanism used to read the data from.",
            "default": "indexedDB"
          },
          "remapBefore": {},
          "remapAfter": {},
          "onSuccess": {},
          "onError": {}
        }
      },
      "StorageWriteActionDefinition": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "key",
          "value"
        ],
        "properties": {
          "type": {
            "enum": [
              "storage.write"
            ],
            "description": "Write data to the appâ€™s local storage."
          },
          "key": {
            "$ref": "#/components/schemas/RemapperDefinition",
            "description": "The key of the storage entry."
          },
          "value": {
            "$ref": "#/components/schemas/RemapperDefinition",
            "description": "The data to write to the storage entry."
          },
          "storage": {
            "enum": [
              "indexedDB",
              "localStorage",
              "sessionStorage"
            ],
            "description": "The mechanism used to store the data.",
            "default": "indexedDB"
          },
          "remapBefore": {},
          "remapAfter": {},
          "onSuccess": {},
          "onError": {}
        }
      },
      "SubPage": {
        "type": "object",
        "description": "This describes what a sub page will look like in the app.",
        "required": [
          "blocks"
        ],
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the sub page.",
            "minLength": 1,
            "maxLength": 50
          },
          "blocks": {
            "type": "array",
            "minItems": 1,
            "description": "The blocks that make up a page.",
            "items": {
              "$ref": "#/components/schemas/BlockDefinition"
            }
          }
        }
      },
      "TabsPageDefinition": {
        "type": "object",
        "description": "This describes what a page will look like in the app.",
        "required": [
          "type",
          "tabs",
          "name"
        ],
        "additionalProperties": true,
        "properties": {
          "type": {
            "enum": [
              "tabs"
            ]
          },
          "tabs": {
            "type": "array",
            "minItems": 1,
            "description": "Each of the available tabs for the tabs page.",
            "items": {
              "$ref": "#/components/schemas/SubPage"
            }
          },
          "name": {
            "type": "string",
            "maxLength": 50,
            "description": "The name of an app.\n\nThis field is always required and must be unique within the app, meaning that it is not possible to\nhave two pages with the same name. The name of the page is displayed at the top of each page as well\nas in the side navigational menu.\n\n> **Note**: The URL used to navigate to pages is determined by this property.\n"
          },
          "navTitle": {
            "$ref": "#/components/schemas/RemapperDefinition",
            "description": "The name of the page when displayed in the navigation menu.\n\nContext property `name` can be used to access the name of the page.\n"
          },
          "icon": {
            "type": "string",
            "description": "An optional icon from the fontawesome icon set\n\nThis will be displayed in the navigation menu.\n"
          },
          "parameters": {
            "type": "array",
            "description": "Page parameters can be used for linking to a page that should display a single resource.\n\nThis defined as a list of strings representing the properties to pass through. More often than not\npassing `id` through is sufficient, depending on the block.\n",
            "items": {
              "type": "string",
              "minLength": 1,
              "maxLength": 30
            }
          },
          "roles": {
            "type": "array",
            "description": "The list of roles that are allowed to view this page.\n\nIf the user doesnâ€™t have any of the roles in the list the page will be unavailable to them. An empty\nlist can be used to specify that users need to log in but do not need a specific role.\n\nUsers trying to visit a page without having the correct roles will be redirected to the first page\nthat they are allowed to view. If there arenâ€™t any accessible pages, the user will be logged out and\ninstructed to contact the app owner to get permissions.\n",
            "items": {
              "type": "string"
            }
          },
          "theme": {
            "$ref": "#/components/schemas/Theme"
          },
          "navigation": {
            "$ref": "#/components/schemas/AppLayoutDefinition/properties/navigation",
            "description": "The type of navigation displayed on the page.\n\nThis overrides the navigation property of the app itself. Defaults to `left-menu` if navigation or\nApp navigation are not set.\n\nSet to `bottom` to use a navigation pane at the bottom of the screen instead of the default side\nmenu. Set to `hidden` to display no navigational menus at all.\n"
          },
          "hideFromMenu": {
            "type": "boolean",
            "description": "Whether or not the page should be displayed in navigational menus.\n\nBy default all pages without parameters are added to navigational menus. Set to `true` to hide the\npage from menus.\n",
            "default": false
          }
        }
      },
      "TeamInviteActionDefinition": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "enum": [
              "team.invite"
            ],
            "description": "Get a list of all of the userâ€™s teams."
          },
          "id": {
            "description": "The ID of the team to invite the user to.",
            "$ref": "#/components/schemas/RemapperDefinition"
          },
          "email": {
            "description": "The email address of the user to invite.",
            "$ref": "#/components/schemas/RemapperDefinition"
          },
          "role": {
            "description": "The role to invite the user as.",
            "$ref": "#/components/schemas/RemapperDefinition",
            "default": "member"
          },
          "remapBefore": {},
          "remapAfter": {},
          "onSuccess": {},
          "onError": {}
        }
      },
      "TeamJoinActionDefinition": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "enum": [
              "team.join"
            ],
            "description": "Get a list of all of the userâ€™s teams."
          },
          "remapBefore": {},
          "remapAfter": {},
          "onSuccess": {},
          "onError": {}
        }
      },
      "TeamListActionDefinition": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "enum": [
              "team.list"
            ],
            "description": "Get a list of all of the userâ€™s teams."
          },
          "remapBefore": {},
          "remapAfter": {},
          "onSuccess": {},
          "onError": {}
        }
      },
      "TeamsDefinition": {
        "type": "object",
        "additionalProperties": false,
        "description": "This defines how teams are handled by an app.",
        "required": [
          "join",
          "invite"
        ],
        "properties": {
          "join": {
            "enum": [
              "anyone",
              "invite"
            ],
            "description": "If this is set to `anyone`, any logged in user may join a team. If this is set to `invite`, only users may join who have been invited."
          },
          "create": {
            "type": "array",
            "description": "A list of app roles which may create a team.\n\nBy default teams can only be created from Appsemble Studio.",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "invite": {
            "type": "array",
            "description": "The roles here determine which users may invite a team member.\n\nThe special roles `$team:member` and `$team:manager` mean that users who are already member of manager of the team may also invite new members.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Theme": {
        "type": "object",
        "description": "A generic theme definition.",
        "additionalProperties": false,
        "minProperties": 1,
        "properties": {
          "themeColor": {
            "type": "string",
            "pattern": "^#[\\dA-Fa-f]{6}$",
            "default": "#ffffff",
            "description": "The generic theme color of the app.\n\nThis is used for example in the URL bar on Android.\n"
          },
          "splashColor": {
            "type": "string",
            "pattern": "^#[\\dA-Fa-f]{6}$",
            "default": "#ffffff",
            "description": "The background color of the PWA splash screen.\n\nThis defaults to the theme color.\n"
          },
          "primaryColor": {
            "type": "string",
            "pattern": "^#[\\dA-Fa-f]{6}$",
            "default": "#5393ff",
            "description": "The primary color used within the app.\n\nThis is used in various elements like the navbar.\n"
          },
          "linkColor": {
            "type": "string",
            "pattern": "^#[\\dA-Fa-f]{6}$",
            "default": "#0440ad",
            "description": "The color used for links."
          },
          "infoColor": {
            "type": "string",
            "pattern": "^#[\\dA-Fa-f]{6}$",
            "default": "#a7d0ff",
            "description": "The color used for informational messages."
          },
          "successColor": {
            "type": "string",
            "pattern": "^#[\\dA-Fa-f]{6}$",
            "default": "#1fd25b",
            "description": "The color used for successful actions."
          },
          "warningColor": {
            "type": "string",
            "pattern": "^#[\\dA-Fa-f]{6}$",
            "default": "#fed719",
            "description": "The color used for warning messages."
          },
          "dangerColor": {
            "type": "string",
            "pattern": "^#[\\dA-Fa-f]{6}$",
            "default": "#ff2800",
            "description": "The color used for error messages."
          },
          "tileLayer": {
            "type": "string",
            "format": "uri",
            "default": "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
            "description": "The tileLayer to use for Leaflet maps."
          },
          "font": {
            "description": "The font to use in the app.",
            "anyOf": [
              {
                "$ref": "#/components/schemas/CustomFontDefinition"
              },
              {
                "$ref": "#/components/schemas/GoogleFontDefinition"
              }
            ]
          }
        }
      },
      "ThrowActionDefinition": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "enum": [
              "throw"
            ],
            "description": "This action throws a new exception based on the data that is passed through.\n\nThis can be used to create a custom error that ends up in the error action handler.\n"
          },
          "remapBefore": {},
          "remapAfter": {},
          "onSuccess": {},
          "onError": {}
        }
      },
      "UserEmail": {
        "type": "object",
        "description": "\n    An email address that is linked to a user.\n\n    Users may use any of their email addresses to login.\n  ",
        "required": [
          "email"
        ],
        "additionalProperties": false,
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "The email address that is registered"
          },
          "verified": {
            "type": "boolean",
            "readOnly": true,
            "description": "Wether or not the email address has been verified by the user."
          }
        }
      },
      "User": {
        "type": "object",
        "description": "An object representing a user.",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "description": "The ID of the user."
          },
          "name": {
            "type": "string",
            "description": "The display name of the user."
          },
          "email": {
            "type": "string",
            "description": "The primary email used for communication."
          },
          "locale": {
            "type": "string",
            "description": "The locale of the user."
          }
        }
      },
      "UserLoginActionDefinition": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "enum": [
              "user.login"
            ],
            "description": "Allows the user to login using an email address and a password.\n\nDoes nothing if the user is already logged in."
          },
          "password": {
            "description": "The password to login with."
          },
          "email": {
            "description": "The email to login with."
          },
          "remapBefore": {},
          "remapAfter": {},
          "onSuccess": {},
          "onError": {}
        }
      },
      "UserRegisterActionDefinition": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "type": {
            "enum": [
              "user.register"
            ],
            "description": "Allows the user to register a new account using an email address and a password.\n\nDoes nothing if the user is already logged in."
          },
          "password": {
            "description": "The password to login with."
          },
          "email": {
            "description": "The email to login with."
          },
          "displayName": {
            "description": "The display name of the user."
          },
          "picture": {
            "description": "The image to use for the profile picture of the user."
          },
          "properties": {
            "description": "The custom properties for the user.\n\nEvery value will be converted to a string."
          },
          "remapBefore": {},
          "remapAfter": {},
          "onSuccess": {},
          "onError": {}
        }
      },
      "UserUpdateActionDefinition": {
        "type": "object",
        "additionalProperties": false,
        "required": [],
        "properties": {
          "type": {
            "enum": [
              "user.update"
            ],
            "description": "Allows the user to update their existing account.\n\nDoes nothing if the user isnâ€™t logged in."
          },
          "password": {
            "description": "The new password."
          },
          "email": {
            "description": "The new email address."
          },
          "displayName": {
            "description": "The new display name of the user."
          },
          "picture": {
            "description": "The new profile picture of the user."
          },
          "properties": {
            "description": "The custom properties for the user.\n\nEvery value will be converted to a string."
          },
          "remapBefore": {},
          "remapAfter": {},
          "onSuccess": {},
          "onError": {}
        }
      }
    },
    "securitySchemes": {
      "app": {
        "type": "oauth2",
        "description": "\n    OAuth2 login for apps.\n\n    The authorization code flow is recommended. The password flow exists for legacy apps and will be\n    removed in the future.\n  ",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "/connect/authorize",
            "tokenUrl": "/oauth2/token",
            "refreshUrl": "/oauth2/token",
            "scopes": {
              "email": "Read the user email address.",
              "openid": "Login the user to the requesting app using OpenID.",
              "profile": "Read the user profile, including the display name and profile picture.",
              "resources:manage": "Manage app resources on behalf of a user.",
              "teams:read": "Read the teams the user is a part of.",
              "teams:write": "Add new members to a team."
            }
          },
          "password": {
            "tokenUrl": "/oauth2/token",
            "refreshUrl": "/oauth2/token",
            "scopes": {
              "email": "Read the user email address.",
              "openid": "Login the user to the requesting app using OpenID.",
              "profile": "Read the user profile, including the display name and profile picture.",
              "resources:manage": "Manage app resources on behalf of a user.",
              "teams:read": "Read the teams the user is a part of.",
              "teams:write": "Add new members to a team."
            }
          }
        }
      },
      "basic": {
        "type": "http",
        "scheme": "basic",
        "description": "Used for logging in to the web interface"
      },
      "cli": {
        "type": "oauth2",
        "description": "\n    OAuth2 login for client credentials.\n\n    For example the Appsemble CLI uses this.\n  ",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "/oauth2/token",
            "scopes": {
              "apps:write": "Create and update apps",
              "blocks:write": "Register and update blocks, and publish new block versions.",
              "organizations:write": "Create and manage organizations.",
              "resources:read": "Read app resources on behalf of a user.",
              "resources:write": "Modify app resources on behalf of a user.",
              "assets:write": "Create app assets on behalf of a user.",
              "teams:read": "Read information about the userâ€™s teams.",
              "teams:write": "Read information about the userâ€™s teams."
            }
          }
        }
      },
      "studio": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "jwt",
        "description": "Used for authenticating requests made using Appsemble studio interface."
      }
    }
  },
  "externalDocs": {
    "description": "Appsemble developer documentation",
    "url": "https://appsemble.app/docs"
  },
  "info": {
    "title": "Appsemble",
    "description": "Welcome to the Appsemble API.\n\nThe app studio can be found on\n> https://appsemble.app\n\nThe OpenAPI explorer can be found on\n> https://appsemble.app/api-explorer\n",
    "license": {
      "name": "LGPL",
      "url": "https://gitlab.com/appsemble/appsemble/blob/main/LICENSE.md"
    },
    "version": "0.20.11"
  },
  "paths": {
    "/api/apps/{appId}/secrets/oauth2": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appId"
        }
      ],
      "post": {
        "tags": [
          "secret"
        ],
        "operationId": "createAppOAuth2Secret",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppOAuth2Secret"
              }
            }
          }
        },
        "security": [
          {
            "studio": []
          }
        ],
        "responses": {
          "201": {
            "description": "A list of the OAuth2 secrets for the app.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppOAuth2Secret"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "secret"
        ],
        "operationId": "getAppOAuth2Secrets",
        "security": [
          {
            "studio": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of the OAuth2 secrets for the app.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppOAuth2Secret"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/apps/{appId}/secrets/oauth2/{appOAuth2SecretId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appId"
        },
        {
          "$ref": "#/components/parameters/appOAuth2SecretId"
        }
      ],
      "get": {
        "tags": [
          "secret"
        ],
        "operationId": "getAppOAuth2Secret",
        "responses": {
          "200": {
            "description": "\n            Get a partial app OAuth2 secret\n\n            Only public facing values are output on this endpoint.\n          ",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppOAuth2Secret"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "secret"
        ],
        "operationId": "updateAppOAuth2Secret",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppOAuth2Secret"
              }
            }
          }
        },
        "security": [
          {
            "studio": []
          }
        ],
        "responses": {
          "200": {
            "description": "The updated OAuth2 secret.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppOAuth2Secret"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "secret"
        ],
        "operationId": "deleteAppOAuth2Secret",
        "security": [
          {
            "studio": []
          }
        ],
        "responses": {
          "204": {
            "description": "The deleted OAuth2 secret."
          }
        }
      }
    },
    "/api/apps/{appId}/secrets/oauth2/{appOAuth2SecretId}/verify": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appId"
        },
        {
          "$ref": "#/components/parameters/appOAuth2SecretId"
        }
      ],
      "post": {
        "tags": [
          "secret"
        ],
        "operationId": "verifyAppOAuth2SecretCode",
        "security": [
          {
            "studio": []
          },
          {}
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "scope",
                  "redirectUri"
                ],
                "properties": {
                  "code": {
                    "type": "string"
                  },
                  "scope": {
                    "type": "string"
                  },
                  "redirectUri": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "\n            Get a partial app OAuth2 secret\n\n            Only public facing values are output on this endpoint.\n          ",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/apps": {
      "post": {
        "tags": [
          "app"
        ],
        "description": "Create a new app",
        "operationId": "createApp",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "description": "Validate whether an app could be created without actually creating one. Must be set to â€˜trueâ€™.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "OrganizationId",
                  "yaml"
                ],
                "properties": {
                  "domain": {
                    "$ref": "#/components/schemas/App/properties/domain"
                  },
                  "path": {
                    "$ref": "#/components/schemas/App/properties/path"
                  },
                  "visibility": {
                    "$ref": "#/components/schemas/App/properties/visibility"
                  },
                  "template": {
                    "$ref": "#/components/schemas/App/properties/template"
                  },
                  "longDescription": {
                    "$ref": "#/components/schemas/App/properties/longDescription"
                  },
                  "yaml": {
                    "type": "string",
                    "description": "The original YAML definition used to define the app."
                  },
                  "OrganizationId": {
                    "$ref": "#/components/schemas/Organization/properties/id"
                  },
                  "icon": {
                    "type": "string",
                    "format": "binary",
                    "description": "The app icon."
                  },
                  "maskableIcon": {
                    "type": "string",
                    "format": "binary",
                    "description": "The app icon."
                  },
                  "iconBackground": {
                    "type": "string",
                    "pattern": "^#[\\dA-Fa-f]{6}$",
                    "description": "The background color to use for the maskable icon."
                  },
                  "coreStyle": {
                    "type": "string",
                    "description": "The custom style to apply to the core app."
                  },
                  "sharedStyle": {
                    "type": "string",
                    "description": "The custom style to apply to all parts of app."
                  },
                  "screenshots": {
                    "type": "array",
                    "description": "Screenshots to showcase in the store",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              },
              "encoding": {
                "coreStyle": {
                  "contentType": "text/css"
                },
                "sharedStyle": {
                  "contentType": "text/css"
                },
                "icon": {
                  "contentType": "image/png,image/jpeg,image/tiff,image/webp"
                },
                "screenshots": {
                  "contentType": "image/png,image/jpeg,image/tiff,image/webp"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The app that was created.",
            "$ref": "#/components/responses/app"
          }
        },
        "security": [
          {
            "studio": []
          },
          {
            "cli": [
              "apps:write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "app"
        ],
        "parameters": [
          {
            "name": "language",
            "schema": {
              "type": "string"
            },
            "description": "The language to include the translations of, if available",
            "in": "query"
          }
        ],
        "description": "Get all existing apps.",
        "operationId": "queryApps",
        "responses": {
          "200": {
            "description": "The list of all apps.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/App"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "studio": []
          },
          {}
        ]
      }
    },
    "/api/apps/{appId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appId"
        }
      ],
      "get": {
        "tags": [
          "app"
        ],
        "parameters": [
          {
            "name": "language",
            "schema": {
              "type": "string"
            },
            "description": "The language to include the translations of, if available",
            "in": "query"
          }
        ],
        "description": "Get a single app",
        "operationId": "getAppById",
        "responses": {
          "200": {
            "description": "The app that matches the given id.",
            "$ref": "#/components/responses/app"
          }
        },
        "security": [
          {
            "studio": []
          },
          {}
        ]
      },
      "patch": {
        "tags": [
          "app"
        ],
        "description": "Update parts of an existing app",
        "operationId": "patchApp",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "domain": {
                    "$ref": "#/components/schemas/App/properties/domain"
                  },
                  "path": {
                    "$ref": "#/components/schemas/App/properties/path"
                  },
                  "visibility": {
                    "$ref": "#/components/schemas/App/properties/visibility"
                  },
                  "template": {
                    "$ref": "#/components/schemas/App/properties/template"
                  },
                  "longDescription": {
                    "$ref": "#/components/schemas/App/properties/longDescription"
                  },
                  "force": {
                    "type": "boolean",
                    "description": "Whether the locked property should be ignored."
                  },
                  "yaml": {
                    "type": "string",
                    "description": "The original YAML definition used to define the app."
                  },
                  "icon": {
                    "type": "string",
                    "format": "binary",
                    "description": "The app icon."
                  },
                  "maskableIcon": {
                    "type": "string",
                    "format": "binary",
                    "description": "The app icon."
                  },
                  "iconBackground": {
                    "type": "string",
                    "pattern": "^#[\\dA-Fa-f]{6}$"
                  },
                  "coreStyle": {
                    "type": "string",
                    "description": "The custom style to apply to the core app."
                  },
                  "sharedStyle": {
                    "type": "string",
                    "description": "The custom style to apply to all parts of app."
                  },
                  "screenshots": {
                    "type": "array",
                    "description": "Screenshots to showcase in the store",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  },
                  "showAppsembleLogin": {
                    "type": "boolean",
                    "description": "Whether the Appsemble login method should be shown."
                  },
                  "showAppsembleOAuth2Login": {
                    "type": "boolean",
                    "description": "Whether the Appsemble OAuth2 login method should be shown."
                  },
                  "emailName": {
                    "type": "string",
                    "description": "The name used for emails."
                  },
                  "emailHost": {
                    "type": "string",
                    "description": "The hostname of the SMTP server."
                  },
                  "emailPassword": {
                    "type": "string",
                    "description": "The password to use for SMTP authentication. This gets encrypted when stored."
                  },
                  "emailUser": {
                    "type": "string",
                    "description": "The username used to authenticate against the SMTP server."
                  },
                  "emailPort": {
                    "type": "string",
                    "description": "The port used for the SMTP server."
                  },
                  "emailSecure": {
                    "type": "boolean",
                    "description": "Whether TLS is being used."
                  }
                }
              },
              "encoding": {
                "coreStyle": {
                  "contentType": "text/css"
                },
                "sharedStyle": {
                  "contentType": "text/css"
                },
                "icon": {
                  "contentType": "image/png,image/jpeg,image/tiff,image/webp"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated app.",
            "$ref": "#/components/responses/app"
          }
        },
        "security": [
          {
            "studio": []
          },
          {
            "cli": [
              "apps:write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "app"
        ],
        "description": "Delete an existing app",
        "operationId": "deleteApp",
        "responses": {
          "204": {
            "description": "The app was successfully deleted."
          }
        },
        "security": [
          {
            "studio": []
          }
        ]
      }
    },
    "/api/apps/{appId}/lock": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appId"
        }
      ],
      "post": {
        "tags": [
          "app"
        ],
        "description": "Update the locked property an app.",
        "operationId": "setAppLock",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "locked"
                ],
                "properties": {
                  "locked": {
                    "$ref": "#/components/schemas/App/properties/locked",
                    "description": "Whether the app should be locked."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Lock status successfully changed"
          }
        },
        "security": [
          {
            "studio": []
          },
          {
            "cli": [
              "apps:write"
            ]
          }
        ]
      }
    },
    "/api/apps/{appId}/email": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appId"
        }
      ],
      "get": {
        "tags": [
          "app"
        ],
        "description": "Get the appâ€™s email settings.",
        "operationId": "getAppEmailSettings",
        "responses": {
          "200": {
            "description": "The current app email settings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "emailName": {
                      "type": "string",
                      "description": "The name used for emails."
                    },
                    "emailHost": {
                      "type": "string",
                      "description": "The hostname of the SMTP server."
                    },
                    "emailPassword": {
                      "type": "boolean",
                      "description": "Whether a password is set."
                    },
                    "emailUser": {
                      "type": "string",
                      "description": "The username used to authenticate against the SMTP server."
                    },
                    "emailPort": {
                      "type": "string",
                      "description": "The port used for the SMTP server."
                    },
                    "emailSecure": {
                      "type": "boolean",
                      "description": "Whether TLS is being used."
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "studio": []
          },
          {
            "cli": [
              "apps:write"
            ]
          }
        ]
      }
    },
    "/api/apps/{appId}/icon": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appId"
        }
      ],
      "get": {
        "tags": [
          "app"
        ],
        "description": "Get the current app icon.",
        "operationId": "getAppIcon",
        "responses": {
          "200": {
            "description": "The icon of the app that matches the given id.",
            "content": {
              "image/png": {},
              "image/jpeg": {},
              "image/tiff": {},
              "image/webp": {}
            }
          }
        }
      },
      "delete": {
        "tags": [
          "app"
        ],
        "description": "Delete the current app icon.",
        "operationId": "deleteAppIcon",
        "responses": {
          "204": {
            "description": "The icon has been successfully removed"
          }
        },
        "security": [
          {
            "studio": []
          },
          {
            "cli": [
              "apps:write"
            ]
          }
        ]
      }
    },
    "/api/apps/{appId}/maskableIcon": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appId"
        }
      ],
      "delete": {
        "tags": [
          "app"
        ],
        "description": "Delete the current appâ€™s maskable icon.",
        "operationId": "deleteAppMaskableIcon",
        "responses": {
          "204": {
            "description": "The icon has been successfully removed"
          }
        },
        "security": [
          {
            "studio": []
          },
          {
            "cli": [
              "apps:write"
            ]
          }
        ]
      }
    },
    "/api/apps/{appId}/subscriptions": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appId"
        }
      ],
      "get": {
        "tags": [
          "app"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/endpoint"
          }
        ],
        "description": "Fetch all subscription settings of an app.",
        "operationId": "getSubscription",
        "responses": {
          "200": {
            "description": "The subscription settings.",
            "$ref": "#/components/responses/subscriptions"
          }
        }
      },
      "post": {
        "tags": [
          "app"
        ],
        "description": "Subscribe to an appâ€™s push notifications",
        "operationId": "addSubscription",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "A serialized PushSubscription object",
                "required": [
                  "endpoint",
                  "keys"
                ],
                "properties": {
                  "endpoint": {
                    "type": "string"
                  },
                  "keys": {
                    "type": "object",
                    "required": [
                      "p256dh",
                      "auth"
                    ],
                    "properties": {
                      "p256dh": {
                        "type": "string"
                      },
                      "auth": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The subscription has successfully been registered."
          }
        },
        "security": [
          {
            "studio": []
          },
          {}
        ]
      },
      "patch": {
        "tags": [
          "app"
        ],
        "description": "Subscribe to an appâ€™s push notifications. If value isnâ€™t set it will toggle between subscribing and unsubscribing.",
        "operationId": "updateSubscription",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "endpoint",
                  "resource",
                  "action"
                ],
                "properties": {
                  "endpoint": {
                    "type": "string",
                    "format": "uri"
                  },
                  "resource": {
                    "type": "string"
                  },
                  "action": {
                    "type": "string",
                    "enum": [
                      "create",
                      "update",
                      "delete"
                    ]
                  },
                  "value": {
                    "type": "boolean"
                  },
                  "resourceId": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The subscription has successfully been updated."
          }
        },
        "security": [
          {
            "studio": []
          },
          {}
        ]
      }
    },
    "/api/apps/{appId}/members": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appId"
        }
      ],
      "get": {
        "tags": [
          "app"
        ],
        "description": "Fetch all members of an app.",
        "operationId": "getAppMembers",
        "responses": {
          "200": {
            "description": "The list of app members.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Member"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "studio": []
          },
          {
            "app": [
              "openid"
            ]
          }
        ]
      }
    },
    "/api/apps/{appId}/members/{memberId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appId"
        },
        {
          "name": "memberId",
          "in": "path",
          "description": "The ID of the member on which to perform an operation",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/User/properties/id"
          }
        }
      ],
      "get": {
        "tags": [
          "app"
        ],
        "description": "Get an app member.",
        "operationId": "getAppMember",
        "responses": {
          "200": {
            "description": "The resulting app member.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            }
          }
        },
        "security": [
          {
            "studio": []
          },
          {
            "app": [
              "openid"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "app"
        ],
        "description": "Assign an app role to a member.",
        "operationId": "setAppMember",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "role"
                ],
                "properties": {
                  "role": {
                    "type": "string",
                    "description": "The role to assign."
                  },
                  "properties": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Any additional properties that are allowed to be set for members."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The resulting app member.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            }
          }
        },
        "security": [
          {
            "studio": []
          }
        ]
      },
      "delete": {
        "tags": [
          "app"
        ],
        "description": "Delete an app member.",
        "operationId": "deleteAppMember",
        "responses": {
          "204": {
            "description": "The app member was deleted successfully."
          }
        },
        "security": [
          {
            "studio": []
          }
        ]
      }
    },
    "/api/apps/{appId}/members/{memberId}/picture": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appId"
        },
        {
          "name": "memberId",
          "in": "path",
          "description": "The ID of the member on which to perform an operation",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/User/properties/id"
          }
        }
      ],
      "get": {
        "tags": [
          "app"
        ],
        "description": "Get an app memberâ€™s profile picture.\n\nThis will return a 404 if the user has not uploaded one.",
        "operationId": "getAppMemberPicture",
        "responses": {
          "200": {
            "description": "The profile picture of the app member.",
            "content": {
              "image/png": {},
              "image/jpeg": {},
              "image/tiff": {},
              "image/webp": {}
            }
          }
        }
      }
    },
    "/api/apps/{appId}/ratings": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appId"
        }
      ],
      "get": {
        "tags": [
          "app"
        ],
        "description": "Fetch all ratings of an app.",
        "operationId": "getAppRatings",
        "responses": {
          "200": {
            "description": "The list of apps ratings.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rating"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "app"
        ],
        "description": "Submit an app rating.",
        "operationId": "submitAppRating",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "rating"
                ],
                "properties": {
                  "rating": {
                    "$ref": "#/components/schemas/Rating/properties/rating"
                  },
                  "description": {
                    "$ref": "#/components/schemas/Rating/properties/description"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The submitted app rating.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Asset/properties/id"
                }
              }
            }
          }
        },
        "security": [
          {
            "studio": []
          }
        ]
      }
    },
    "/api/apps/{appId}/broadcast": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appId"
        }
      ],
      "post": {
        "tags": [
          "app"
        ],
        "description": "Broadcast a push notification to every subscriber of the app.",
        "operationId": "broadcast",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The data to include in the notification",
                "required": [
                  "body"
                ],
                "properties": {
                  "title": {
                    "description": "The title of the notification. This defaults to the name of the app if not otherwise specified.",
                    "type": "string"
                  },
                  "body": {
                    "description": "The content of the notification",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The notification has been successfully broadcasted."
          }
        },
        "security": [
          {
            "studio": []
          }
        ]
      }
    },
    "/api/apps/{appId}/snapshots": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appId"
        }
      ],
      "get": {
        "tags": [
          "app"
        ],
        "description": "Get a list of snapshots made of the app.",
        "operationId": "getAppSnapshots",
        "responses": {
          "200": {
            "description": "The available snapshots",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number",
                        "description": "The ID of the snapshot."
                      },
                      "$created": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The creation date of the snapshot."
                      },
                      "$author": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "$ref": "#/components/schemas/User/properties/id"
                          },
                          "name": {
                            "$ref": "#/components/schemas/User/properties/name"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "studio": []
          },
          {
            "cli": [
              "apps:write"
            ]
          }
        ]
      }
    },
    "/api/apps/{appId}/snapshots/{snapshotId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appId"
        },
        {
          "name": "snapshotId",
          "in": "path",
          "description": "The ID of the snapshot",
          "required": true,
          "schema": {
            "type": "number",
            "description": "The ID of the snapshot."
          }
        }
      ],
      "get": {
        "tags": [
          "app"
        ],
        "description": "Get a single snapshot made of the app.",
        "operationId": "getAppSnapshot",
        "responses": {
          "200": {
            "description": "The snapshot",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "description": "The ID of the snapshot."
                    },
                    "yaml": {
                      "type": "string",
                      "description": "The app definition."
                    },
                    "$created": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The creation date of the snapshot."
                    },
                    "$author": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "$ref": "#/components/schemas/User/properties/id"
                        },
                        "name": {
                          "$ref": "#/components/schemas/User/properties/name"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "studio": []
          },
          {
            "cli": [
              "apps:write"
            ]
          }
        ]
      }
    },
    "/api/apps/{appId}/screenshots": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appId"
        }
      ],
      "post": {
        "tags": [
          "app"
        ],
        "description": "Add one or multiple screenshots of an app.",
        "operationId": "createAppScreenshot",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "screenshots": {
                    "type": "array",
                    "description": "Screenshots to showcase in the store",
                    "minItems": 1,
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              },
              "encoding": {
                "screenshots": {
                  "contentType": "image/png,image/jpeg,image/tiff,image/webp"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The screenshots have been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "description": "The ID of the newly created screenshot."
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "studio": []
          },
          {
            "cli": [
              "apps:write"
            ]
          }
        ]
      }
    },
    "/api/apps/{appId}/screenshots/{screenshotId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appId"
        },
        {
          "$ref": "#/components/parameters/screenshotId"
        }
      ],
      "get": {
        "tags": [
          "app"
        ],
        "description": "Get a screenshot of an app.",
        "operationId": "getAppScreenshot",
        "responses": {
          "200": {
            "description": "The app screenshot"
          }
        }
      },
      "delete": {
        "tags": [
          "app"
        ],
        "description": "Delete an existing screenshot.",
        "operationId": "deleteAppScreenshot",
        "responses": {
          "200": {
            "description": "The screenshot has been successfully deleted."
          }
        },
        "security": [
          {
            "studio": []
          },
          {
            "cli": [
              "apps:write"
            ]
          }
        ]
      }
    },
    "/api/apps/{appId}/style/core": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appId"
        }
      ],
      "get": {
        "tags": [
          "app"
        ],
        "description": "Get the core style for this app.",
        "operationId": "getAppCoreStyle",
        "responses": {
          "200": {
            "description": "The core stylesheet associated with this app.",
            "content": {
              "text/css": {}
            }
          }
        }
      }
    },
    "/api/apps/{appId}/style/shared": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appId"
        }
      ],
      "get": {
        "tags": [
          "app"
        ],
        "description": "Get the shared style for this app.",
        "operationId": "getAppSharedStyle",
        "responses": {
          "200": {
            "description": "The shared stylesheet associated with this app.",
            "content": {
              "text/css": {}
            }
          }
        }
      }
    },
    "/api/apps/{appId}/style/block/@{organizationId}/{blockId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appId"
        },
        {
          "$ref": "#/components/parameters/organizationId"
        },
        {
          "$ref": "#/components/parameters/blockId"
        }
      ],
      "get": {
        "tags": [
          "app"
        ],
        "description": "Get the app style for a block.",
        "operationId": "getAppBlockStyle",
        "responses": {
          "200": {
            "description": "The stylesheet associated with this block for this app.",
            "content": {
              "text/css": {}
            }
          }
        }
      },
      "post": {
        "tags": [
          "app"
        ],
        "description": "Upload a block stylesheet for this app.",
        "operationId": "setAppBlockStyle",
        "requestBody": {
          "description": "The new app block stylesheet.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "style"
                ],
                "properties": {
                  "style": {
                    "type": "string"
                  },
                  "force": {
                    "type": "boolean",
                    "writeOnly": true,
                    "description": "If this is true, the app lock is ignored."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The block style has been updated successfully."
          }
        },
        "security": [
          {
            "studio": []
          },
          {
            "cli": [
              "apps:write"
            ]
          }
        ]
      }
    },
    "/api/apps/{appId}/teams": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appId"
        }
      ],
      "get": {
        "tags": [
          "app"
        ],
        "description": "Get a list of app teams.",
        "operationId": "getTeams",
        "responses": {
          "200": {
            "description": "The list of all teams.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "description": "An app team",
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number"
                      },
                      "name": {
                        "type": "string"
                      },
                      "role": {
                        "type": "string",
                        "description": "The role of the user requesting the list of teams",
                        "enum": [
                          "member",
                          "manager"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "studio": []
          },
          {
            "app": [
              "teams:read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "app"
        ],
        "description": "Create a new team.",
        "operationId": "createTeam",
        "requestBody": {
          "description": "The team to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "annotations": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created team",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number"
                    },
                    "name": {
                      "type": "string"
                    },
                    "role": {
                      "type": "string",
                      "description": "The role of the user who created the team",
                      "enum": [
                        "member",
                        "manager"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "app": [
              "teams:write"
            ]
          },
          {
            "studio": []
          },
          {
            "cli": [
              "teams:write"
            ]
          }
        ]
      }
    },
    "/api/apps/{appId}/teams/{teamId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appId"
        },
        {
          "name": "teamId",
          "in": "path",
          "description": "The ID of the team",
          "required": true,
          "schema": {
            "type": "number",
            "readOnly": true
          }
        }
      ],
      "get": {
        "tags": [
          "app"
        ],
        "description": "Fetch an existing team.",
        "operationId": "getTeam",
        "responses": {
          "200": {
            "description": "The requested team",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number"
                    },
                    "name": {
                      "type": "string"
                    },
                    "role": {
                      "type": "string",
                      "description": "The role of the user who requested the team",
                      "enum": [
                        "member",
                        "manager"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "studio": []
          }
        ]
      },
      "patch": {
        "tags": [
          "app"
        ],
        "description": "Update an existing team.",
        "operationId": "patchTeam",
        "requestBody": {
          "description": "The team to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "annotations": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated team",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number"
                    },
                    "name": {
                      "type": "string"
                    },
                    "role": {
                      "type": "string",
                      "description": "The role of the user who updated the team",
                      "enum": [
                        "member",
                        "manager"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "studio": []
          },
          {
            "cli": [
              "teams:write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "app"
        ],
        "description": "Delete an existing team.",
        "operationId": "deleteTeam",
        "responses": {
          "204": {
            "description": "The team has successfully been deleted."
          }
        },
        "security": [
          {
            "studio": []
          },
          {
            "cli": [
              "teams:write"
            ]
          }
        ]
      }
    },
    "/api/apps/{appId}/teams/{teamId}/members": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appId"
        },
        {
          "name": "teamId",
          "in": "path",
          "description": "The ID of the team",
          "required": true,
          "schema": {
            "type": "number",
            "readOnly": true
          }
        }
      ],
      "get": {
        "tags": [
          "app"
        ],
        "description": "Fetch the members of a team and their roles within the team.",
        "operationId": "getTeamMembers",
        "responses": {
          "200": {
            "description": "The list of all members.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Member"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "studio": []
          }
        ]
      },
      "post": {
        "tags": [
          "app"
        ],
        "description": "Add an app member member to a team.",
        "operationId": "addTeamMember",
        "requestBody": {
          "description": "The team to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/User/properties/id"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The added member",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            }
          }
        },
        "security": [
          {
            "studio": []
          },
          {
            "app": [
              "teams:write"
            ]
          },
          {
            "cli": [
              "teams:write"
            ]
          }
        ]
      }
    },
    "/api/apps/{appId}/teams/{teamId}/members/{memberId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appId"
        },
        {
          "name": "teamId",
          "in": "path",
          "description": "The ID of the team",
          "required": true,
          "schema": {
            "type": "number",
            "readOnly": true
          }
        },
        {
          "name": "memberId",
          "in": "path",
          "description": "The ID of the team member",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/User/properties/id"
          }
        }
      ],
      "put": {
        "tags": [
          "app"
        ],
        "description": "Update the role of a team member.",
        "operationId": "updateTeamMember",
        "requestBody": {
          "description": "The team to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "role"
                ],
                "properties": {
                  "role": {
                    "type": "string",
                    "enum": [
                      "member",
                      "manager"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated member",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            }
          }
        },
        "security": [
          {
            "studio": []
          },
          {
            "cli": [
              "teams:write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "app"
        ],
        "description": "Remove a member from a team.",
        "operationId": "removeTeamMember",
        "responses": {
          "204": {
            "description": "The team member has been removed successfully."
          }
        },
        "security": [
          {
            "studio": []
          },
          {
            "cli": [
              "teams:write"
            ]
          }
        ]
      }
    },
    "/api/apps/{appId}/teams/{teamId}/invite": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appId"
        },
        {
          "name": "teamId",
          "in": "path",
          "description": "The ID of the team",
          "required": true,
          "schema": {
            "type": "number",
            "readOnly": true
          }
        }
      ],
      "post": {
        "tags": [
          "app"
        ],
        "description": "Invite a new user to a team.",
        "operationId": "inviteTeamMember",
        "requestBody": {
          "description": "The team invite to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "The email address of the user to invite."
                  },
                  "role": {
                    "type": "string",
                    "enum": [
                      "member",
                      "manager"
                    ],
                    "description": "The role to invite the user as.",
                    "default": "member"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated member",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            }
          }
        },
        "security": [
          {
            "app": [
              "teams:write"
            ]
          }
        ]
      }
    },
    "/api/apps/{appId}/team/invite": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appId"
        }
      ],
      "get": {
        "tags": [
          "app"
        ],
        "description": "Get details of a team invite.",
        "operationId": "getTeamInvite",
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "description": "The ID code of the team invite",
            "required": true,
            "schema": {
              "type": "string",
              "readOnly": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The team invite",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            }
          }
        },
        "security": [
          {
            "app": [
              "teams:read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "app"
        ],
        "operationId": "acceptTeamInvite",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "code": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The created member",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            }
          }
        },
        "security": [
          {
            "app": [
              "teams:read"
            ]
          }
        ]
      }
    },
    "/api/apps/{appId}/secrets/saml": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appId"
        }
      ],
      "post": {
        "tags": [
          "secret"
        ],
        "operationId": "createAppSamlSecret",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {}
            }
          }
        },
        "security": [
          {
            "studio": []
          }
        ],
        "responses": {
          "201": {
            "description": "A list of the SAML secrets for the app.",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "secret"
        ],
        "operationId": "getAppSamlSecrets",
        "security": [
          {
            "studio": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of the SAML secrets for the app.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {}
                }
              }
            }
          }
        }
      }
    },
    "/api/apps/{appId}/secrets/saml/{appSamlSecretId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appId"
        },
        {
          "$ref": "#/components/parameters/appSamlSecretId"
        }
      ],
      "put": {
        "tags": [
          "secret"
        ],
        "operationId": "updateAppSamlSecret",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {}
            }
          }
        },
        "security": [
          {
            "studio": []
          }
        ],
        "responses": {
          "200": {
            "description": "The updated SAML secret.",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "secret"
        ],
        "operationId": "deleteAppSamlSecret",
        "security": [
          {
            "studio": []
          }
        ],
        "responses": {
          "204": {
            "description": "The deleted SAML secret."
          }
        }
      }
    },
    "/api/messages": {
      "parameters": [
        {
          "name": "context",
          "in": "query",
          "schema": {
            "type": "string",
            "enum": [
              "studio",
              "app"
            ]
          }
        }
      ],
      "get": {
        "tags": [
          "language"
        ],
        "description": "Get a list of all languages with messages.",
        "operationId": "getAppsembleLanguages",
        "responses": {
          "200": {
            "description": "The list of supported languages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/messages/{language}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/language"
        }
      ],
      "get": {
        "tags": [
          "language"
        ],
        "description": "Get the Appsemble messages for this language.",
        "operationId": "getStudioMessages",
        "responses": {
          "200": {
            "description": "The app messages for the selected language.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppMessages"
                }
              }
            }
          }
        }
      }
    },
    "/api/apps/{appId}/assets": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appId"
        }
      ],
      "get": {
        "tags": [
          "asset"
        ],
        "description": "Get all of the appâ€™s assets.",
        "operationId": "getAssets",
        "responses": {
          "200": {
            "description": "The assets associated with the app.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Asset"
                }
              }
            }
          }
        },
        "security": [
          {
            "studio": []
          },
          {}
        ]
      },
      "post": {
        "tags": [
          "asset"
        ],
        "description": "Upload a new asset.",
        "operationId": "createAsset",
        "requestBody": {
          "description": "The asset to upload.",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "description": "The request body for creating an asset.",
                "additionalProperties": false,
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "writeOnly": true,
                    "description": "The binary data of the asset. This may include a filename."
                  },
                  "name": {
                    "type": "string",
                    "pattern": "^([\\da-z](?:(?!.*--)[\\da-z-]*[\\da-z])?)$",
                    "description": "The given name of the asset. Assets may be referenced by their name or ID in the API."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The asset that was created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Asset"
                }
              }
            }
          }
        },
        "security": [
          {
            "studio": []
          },
          {},
          {
            "cli": [
              "assets:write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "asset"
        ],
        "description": "Delete multiple app assets.",
        "operationId": "deleteAssets",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "An array of asset IDs to remove.",
                "items": {
                  "$ref": "#/components/schemas/Asset/properties/id"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The app assets have been deleted successfully."
          }
        },
        "security": [
          {
            "studio": []
          },
          {
            "app": [
              "resources:manage"
            ]
          },
          {
            "cli": [
              "resources:write"
            ]
          },
          {}
        ]
      }
    },
    "/api/apps/{appId}/assets/{assetId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appId"
        },
        {
          "$ref": "#/components/parameters/assetId"
        }
      ],
      "get": {
        "tags": [
          "asset"
        ],
        "description": "Get a single asset",
        "operationId": "getAssetById",
        "responses": {
          "200": {
            "description": "The asset that matches the given id."
          }
        }
      },
      "delete": {
        "tags": [
          "asset"
        ],
        "description": "Remove an existing asset",
        "operationId": "deleteAsset",
        "responses": {
          "204": {
            "description": "The asset was successfully deleted."
          }
        },
        "security": [
          {
            "studio": []
          },
          {
            "app": [
              "resources:manage"
            ]
          }
        ]
      }
    },
    "/api/blocks": {
      "post": {
        "tags": [
          "block version"
        ],
        "description": "Publish a block.",
        "operationId": "publishBlock",
        "requestBody": {
          "description": "The new block version to publish.",
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/BlockVersion"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/blockVersion"
          }
        },
        "security": [
          {
            "cli": [
              "blocks:write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "block"
        ],
        "description": "Get all blockâ€™s latest definitions.",
        "operationId": "queryBlocks",
        "responses": {
          "200": {
            "description": "The list of all latest block versions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BlockVersion"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "studio": []
          },
          {}
        ]
      }
    },
    "/api/blocks/@{organizationId}/{blockId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizationId"
        },
        {
          "$ref": "#/components/parameters/blockId"
        }
      ],
      "get": {
        "tags": [
          "block"
        ],
        "description": "Get a single block",
        "operationId": "getBlock",
        "responses": {
          "200": {
            "description": "The latest version of the block that matches the given id.",
            "$ref": "#/components/responses/blockVersion"
          }
        }
      }
    },
    "/api/blocks/@{organizationId}/{blockId}/versions": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizationId"
        },
        {
          "$ref": "#/components/parameters/blockId"
        }
      ],
      "get": {
        "tags": [
          "block version"
        ],
        "description": "Retrieves all available versions of a block.",
        "operationId": "getBlockVersions",
        "responses": {
          "200": {
            "description": "A list of versions of a block.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BlockVersion"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/blocks/@{organizationId}/{blockId}/versions/{blockVersion}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizationId"
        },
        {
          "$ref": "#/components/parameters/blockId"
        },
        {
          "$ref": "#/components/parameters/blockVersion"
        }
      ],
      "get": {
        "tags": [
          "block"
        ],
        "description": "Retrieve a single block version.",
        "operationId": "getBlockVersion",
        "responses": {
          "200": {
            "$ref": "#/components/responses/blockVersion"
          }
        }
      }
    },
    "/api/blocks/@{organizationId}/{blockId}/versions/{blockVersion}/asset": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizationId"
        },
        {
          "$ref": "#/components/parameters/blockId"
        },
        {
          "$ref": "#/components/parameters/blockVersion"
        },
        {
          "name": "filename",
          "in": "query",
          "description": "The file name of the block asset to download",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": [
          "block"
        ],
        "description": "Download a single block asset",
        "operationId": "getBlockAsset",
        "responses": {
          "200": {
            "description": "The asset that has been requested."
          }
        }
      }
    },
    "/api/blocks/@{organizationId}/{blockId}/versions/{blockVersion}/messages/{language}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizationId"
        },
        {
          "$ref": "#/components/parameters/blockId"
        },
        {
          "$ref": "#/components/parameters/blockVersion"
        },
        {
          "in": "path",
          "name": "language",
          "schema": {
            "type": "string"
          },
          "description": "The language to get messages for.",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "block"
        ],
        "description": "Get internationalized messages for a block.",
        "operationId": "getBlockMessages",
        "responses": {
          "200": {
            "description": "A key/value mapping of block messages.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A key/value mapping of block messages.",
                  "additionalProperties": {
                    "type": "string",
                    "description": "A translated block message."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/blocks/@{organizationId}/{blockId}/versions/{blockVersion}/icon": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizationId"
        },
        {
          "$ref": "#/components/parameters/blockId"
        },
        {
          "$ref": "#/components/parameters/blockVersion"
        }
      ],
      "get": {
        "tags": [
          "block"
        ],
        "description": "Get the icon of a block version.",
        "operationId": "getBlockIcon",
        "responses": {
          "200": {
            "description": "The icon that represents the block."
          }
        }
      }
    },
    "/api/email": {
      "post": {
        "tags": [
          "user"
        ],
        "description": "Register a new account using an email address and a password.",
        "operationId": "registerEmail",
        "requestBody": {
          "description": "The user account to register.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "password": {
                    "type": "string",
                    "minLength": 8
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The account that was created."
          }
        }
      }
    },
    "/api/email/verify": {
      "post": {
        "tags": [
          "user"
        ],
        "description": "Verify the email address of a registered user.",
        "operationId": "verifyEmail",
        "requestBody": {
          "description": "The user account to register.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "token"
                ],
                "properties": {
                  "token": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The account was successfully verified."
          }
        }
      }
    },
    "/api/email/resend": {
      "post": {
        "tags": [
          "user"
        ],
        "description": "Resend the verification code for a registered email.",
        "operationId": "resendEmailVerification",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The verification email was sent if an account was found in the database."
          }
        },
        "security": [
          {
            "studio": []
          }
        ]
      }
    },
    "/api/email/reset/request": {
      "post": {
        "tags": [
          "user"
        ],
        "description": "Request a reset token for resetting passwords.",
        "operationId": "requestResetPassword",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The request has been received and an email was sent if it exists."
          }
        }
      }
    },
    "/api/email/reset": {
      "post": {
        "tags": [
          "user"
        ],
        "description": "Reset a password using a password reset token.",
        "operationId": "resetPassword",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "password",
                  "token"
                ],
                "properties": {
                  "password": {
                    "type": "string",
                    "minLength": 8
                  },
                  "token": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The password has been reset."
          }
        }
      }
    },
    "/api/health": {
      "get": {
        "tags": [
          "health"
        ],
        "description": "Check whether or not the API is healthy",
        "operationId": "checkHealth",
        "responses": {
          "200": {
            "description": "An indication the server is healthy.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Health"
                }
              }
            }
          }
        }
      }
    },
    "/api/ssl": {
      "get": {
        "tags": [
          "health"
        ],
        "description": "Check the SSL certificate status for the given domain names.",
        "operationId": "getSSLStatus",
        "parameters": [
          {
            "in": "query",
            "name": "domains",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "hostname"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A mapping of domain name to their SSL status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "enum": [
                      "error",
                      "missing",
                      "pending",
                      "ready",
                      "unknown"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/invites/{token}": {
      "parameters": [
        {
          "name": "token",
          "in": "path",
          "description": "The token of the invite.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": [
          "organization"
        ],
        "description": "Fetch information about an invite.",
        "operationId": "getInvitation",
        "responses": {
          "200": {
            "description": "An invite response",
            "$ref": "#/components/responses/invite"
          }
        }
      }
    },
    "/api/oauth2/client-credentials": {
      "post": {
        "description": "Register new OAuth2 client credentials for the authenticated user.",
        "tags": [
          "oauth2"
        ],
        "operationId": "registerOAuth2ClientCredentials",
        "requestBody": {
          "description": "The OAuth2 client credentials",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OAuth2ClientCredentials"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The newly created client credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuth2ClientCredentials"
                }
              }
            }
          }
        },
        "security": [
          {
            "studio": []
          }
        ]
      },
      "get": {
        "description": "Get a list of client credentials for the authenticated user",
        "tags": [
          "oauth2"
        ],
        "operationId": "listOAuth2ClientCredentials",
        "responses": {
          "200": {
            "description": "A list of client credentials entities.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OAuth2ClientCredentials"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "studio": []
          }
        ]
      }
    },
    "/api/oauth2/client-credentials/{clientId}": {
      "parameters": [
        {
          "name": "clientId",
          "in": "path",
          "description": "The client id of the OAuth2 client credentials on which to perform an operation",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "description": "Revoke the client credentials",
        "tags": [
          "oauth2"
        ],
        "operationId": "deleteOAuth2ClientCredentials",
        "responses": {
          "204": {
            "description": "The client credentials have been revoked successfully."
          }
        },
        "security": [
          {
            "studio": []
          }
        ]
      }
    },
    "/api/oauth2/connect/register": {
      "post": {
        "operationId": "registerOAuth2Connection",
        "description": "asd",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "authorizationUrl",
                  "code"
                ],
                "properties": {
                  "authorizationUrl": {
                    "type": "string"
                  },
                  "code": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/oauth2/connect/pending": {
      "post": {
        "description": "Create an account using an OAuth2 authorization.",
        "tags": [
          "oauth2"
        ],
        "operationId": "connectPendingOAuth2Profile",
        "requestBody": {
          "description": "The OAuth2 client credentials",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "code",
                  "authorizationUrl"
                ],
                "properties": {
                  "code": {
                    "type": "string"
                  },
                  "authorizationUrl": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "An access token response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "studio": []
          },
          {}
        ]
      }
    },
    "/api/oauth2/connected": {
      "get": {
        "description": "Get a list of the userâ€™s connected OAuth2 accounts.",
        "tags": [
          "oauth2"
        ],
        "operationId": "getConnectedAccounts",
        "responses": {
          "200": {
            "description": "An access token response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "authorizationUrl": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "studio": []
          }
        ]
      },
      "delete": {
        "description": "Unlink a linked account from the logged in user.",
        "tags": [
          "oauth2"
        ],
        "operationId": "unlinkConnectedAccount",
        "parameters": [
          {
            "in": "query",
            "name": "authorizationUrl",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The account was unlinked successfully."
          }
        },
        "security": [
          {
            "studio": []
          }
        ]
      }
    },
    "/api/connect/userinfo": {
      "get": {
        "tags": [
          "openid",
          "user"
        ],
        "description": "\n        Get the user information formatted as OpenID user info.\n\n        See https://connect2id.com/products/server/docs/api/userinfo\n      ",
        "operationId": "getUserInfo",
        "security": [
          {
            "studio": []
          },
          {
            "app": [
              "openid"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OpenID compatible user information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "sub": {
                      "type": "string",
                      "description": "The subject (end-user) identifier. "
                    },
                    "name": {
                      "type": "string",
                      "description": "The full name of the end-user"
                    },
                    "picture": {
                      "type": "string",
                      "format": "url",
                      "description": "The URL of the profile page for the end-user."
                    },
                    "email": {
                      "type": "string",
                      "format": "email",
                      "description": "The end-userâ€™s preferred email address."
                    },
                    "email_verified": {
                      "type": "boolean",
                      "description": "True if the end-userâ€™s email address has been verified, else false."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/oauth2/consent/verify": {
      "post": {
        "description": "Verify if the user has previously agreed to the requested OAuth2 consent.",
        "tags": [
          "oauth2"
        ],
        "operationId": "verifyOAuth2Consent",
        "requestBody": {
          "$ref": "#/components/requestBodies/oauth2Consent"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/oauth2AuthorizationCode"
          }
        },
        "security": [
          {
            "studio": []
          }
        ]
      }
    },
    "/api/oauth2/consent/agree": {
      "post": {
        "description": "Create a new OAuth2 consent.",
        "tags": [
          "oauth2"
        ],
        "operationId": "agreeOAuth2Consent",
        "requestBody": {
          "$ref": "#/components/requestBodies/oauth2Consent"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/oauth2AuthorizationCode"
          }
        },
        "security": [
          {
            "studio": []
          }
        ]
      }
    },
    "/api/organizations": {
      "get": {
        "tags": [
          "organization"
        ],
        "description": "Fetch the list of organizations.",
        "operationId": "getOrganizations",
        "responses": {
          "200": {
            "description": "The list of of organizations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "organization"
        ],
        "description": "Create a new organization.",
        "operationId": "createOrganization",
        "requestBody": {
          "description": "The organization to create",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/Organization/properties/id"
                  },
                  "name": {
                    "$ref": "#/components/schemas/Organization/properties/name"
                  },
                  "description": {
                    "$ref": "#/components/schemas/Organization/properties/description"
                  },
                  "email": {
                    "$ref": "#/components/schemas/Organization/properties/email"
                  },
                  "website": {
                    "$ref": "#/components/schemas/Organization/properties/website"
                  },
                  "icon": {
                    "type": "string",
                    "format": "binary",
                    "description": "The organization icon."
                  }
                }
              },
              "encoding": {
                "icon": {
                  "contentType": "image/png,image/jpeg,image/tiff,image/webp"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/organization"
          }
        },
        "security": [
          {
            "studio": []
          },
          {
            "cli": [
              "organizations:write"
            ]
          }
        ]
      }
    },
    "/api/organizations/{organizationId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": [
          "organization"
        ],
        "description": "Get a single organization.",
        "operationId": "getOrganization",
        "responses": {
          "200": {
            "$ref": "#/components/responses/organization"
          }
        }
      },
      "patch": {
        "tags": [
          "organization"
        ],
        "description": "Update an organization",
        "operationId": "patchOrganization",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "$ref": "#/components/schemas/Organization/properties/name"
                  },
                  "description": {
                    "$ref": "#/components/schemas/Organization/properties/description"
                  },
                  "email": {
                    "$ref": "#/components/schemas/Organization/properties/email"
                  },
                  "website": {
                    "$ref": "#/components/schemas/Organization/properties/website"
                  },
                  "icon": {
                    "type": "string",
                    "format": "binary",
                    "description": "The organization icon."
                  }
                }
              },
              "encoding": {
                "icon": {
                  "contentType": "image/png,image/jpeg,image/tiff,image/webp"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/organization"
          }
        },
        "security": [
          {
            "studio": []
          },
          {
            "cli": [
              "organizations:write"
            ]
          }
        ]
      }
    },
    "/api/organizations/{organizationId}/icon": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": [
          "organization"
        ],
        "description": "Get the organization icon.",
        "operationId": "getOrganizationIcon",
        "responses": {
          "200": {
            "description": "The icon that represents the organization."
          }
        }
      }
    },
    "/api/organizations/{organizationId}/members": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": [
          "organization"
        ],
        "description": "Get a list of organization members.",
        "operationId": "getMembers",
        "responses": {
          "200": {
            "description": "The list of all members.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Member"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "studio": []
          }
        ]
      }
    },
    "/api/organizations/{organizationId}/invites/resend": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "post": {
        "tags": [
          "organization"
        ],
        "description": "Request to resend an invitation.",
        "operationId": "resendInvitation",
        "requestBody": {
          "description": "The email of the person to resend the invitation to.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The invite has been sent."
          }
        },
        "security": [
          {
            "studio": []
          }
        ]
      }
    },
    "/api/organizations/{organizationId}/join": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "post": {
        "tags": [
          "organization"
        ],
        "description": "Respond to a given invitation.",
        "operationId": "respondInvitation",
        "requestBody": {
          "description": "The response of the invitation.\n\n        If response is true, user will join the organization. If response is false, the user declines the invite and the invite is removed.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "response",
                  "token"
                ],
                "properties": {
                  "response": {
                    "type": "boolean"
                  },
                  "token": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The response has been processed."
          }
        },
        "security": [
          {
            "studio": []
          }
        ]
      }
    },
    "/api/organizations/{organizationId}/invites": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": [
          "organization"
        ],
        "description": "Get a list of invited organization members.",
        "operationId": "getInvites",
        "responses": {
          "200": {
            "description": "The list of all invites.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "email": {
                        "type": "string",
                        "format": "email"
                      },
                      "role": {
                        "type": "string",
                        "enum": [
                          "Member",
                          "Translator",
                          "APIReader",
                          "APIUser",
                          "AppEditor",
                          "Maintainer",
                          "Owner"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "studio": []
          }
        ]
      },
      "post": {
        "tags": [
          "organization"
        ],
        "description": "Invite a new member to the organization that matches the given id.",
        "operationId": "inviteMembers",
        "requestBody": {
          "description": "The member to invite.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "email",
                    "role"
                  ],
                  "properties": {
                    "email": {
                      "type": "string",
                      "format": "email"
                    },
                    "role": {
                      "type": "string",
                      "enum": [
                        "Member",
                        "Translator",
                        "APIReader",
                        "APIUser",
                        "AppEditor",
                        "Maintainer",
                        "Owner"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The newly invited member.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "security": [
          {
            "studio": []
          }
        ]
      },
      "delete": {
        "tags": [
          "organization"
        ],
        "description": "Revoke a member invitation.",
        "operationId": "removeInvite",
        "requestBody": {
          "description": "The email address to revoke the invite of.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The invitation has been successfully revoked."
          }
        },
        "security": [
          {
            "studio": []
          }
        ]
      }
    },
    "/api/organizations/{organizationId}/members/{memberId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizationId"
        },
        {
          "name": "memberId",
          "in": "path",
          "description": "The ID of the member to remove",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/User/properties/id"
          }
        }
      ],
      "delete": {
        "tags": [
          "organization"
        ],
        "description": "Remove a member from the organization that matches the given id, or leave the organization if the member id matches the userâ€™s member id",
        "operationId": "removeMember",
        "responses": {
          "204": {
            "description": "The member has been successfully removed."
          }
        },
        "security": [
          {
            "studio": []
          }
        ]
      }
    },
    "/api/organizations/{organizationId}/members/{memberId}/role": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizationId"
        },
        {
          "name": "memberId",
          "in": "path",
          "description": "The ID of the member",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/User/properties/id"
          }
        }
      ],
      "put": {
        "tags": [
          "organization"
        ],
        "description": "Set the role of the member within the organization.",
        "operationId": "setRole",
        "requestBody": {
          "description": "The role to set.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "role"
                ],
                "properties": {
                  "role": {
                    "type": "string",
                    "enum": [
                      "Member",
                      "Translator",
                      "APIReader",
                      "APIUser",
                      "AppEditor",
                      "Maintainer",
                      "Owner"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The memberâ€™s role has been successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            }
          }
        },
        "security": [
          {
            "studio": []
          }
        ]
      }
    },
    "/api/organizations/{organizationId}/apps": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": [
          "organization"
        ],
        "parameters": [
          {
            "name": "language",
            "schema": {
              "type": "string"
            },
            "description": "The language to include the translations of, if available",
            "in": "query"
          }
        ],
        "description": "Get a list of an organizationâ€™s apps. Private apps are excluded unless the user is in the organization.",
        "operationId": "getOrganizationApps",
        "responses": {
          "200": {
            "description": "The list of this organizationâ€™s apps.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/App"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "studio": []
          },
          {}
        ]
      }
    },
    "/api/organizations/{organizationId}/blocks": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizationId"
        }
      ],
      "get": {
        "tags": [
          "organization"
        ],
        "description": "Get a list of an organizationâ€™s blocks.",
        "operationId": "getOrganizationBlocks",
        "responses": {
          "200": {
            "description": "The list of this organizationâ€™s blocks.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BlockVersion"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "studio": []
          },
          {}
        ]
      }
    },
    "/api/apps/{appId}/action/{path}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appId"
        },
        {
          "in": "path",
          "name": "path",
          "description": "The path to the action to execute.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": [
          "proxy"
        ],
        "description": "Proxy a GET request action",
        "operationId": "proxyGet",
        "responses": {
          "default": {
            "description": "The proxied response"
          }
        },
        "security": [
          {
            "app": [
              "email",
              "profile"
            ]
          },
          {}
        ],
        "parameters": [
          {
            "in": "query",
            "name": "data",
            "description": "The data that was passed to the action",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "proxy"
        ],
        "description": "Proxy a DELETE request action",
        "operationId": "proxyDelete",
        "responses": {
          "default": {
            "description": "The proxied response"
          }
        },
        "security": [
          {
            "app": [
              "email",
              "profile"
            ]
          },
          {}
        ],
        "parameters": [
          {
            "in": "query",
            "name": "data",
            "description": "The data that was passed to the action",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "proxy"
        ],
        "description": "Proxy a PATCH request action",
        "operationId": "proxyPatch",
        "responses": {
          "default": {
            "description": "The proxied response"
          }
        },
        "security": [
          {
            "app": [
              "email",
              "profile"
            ]
          },
          {}
        ],
        "requestBody": {
          "description": "The data that was passed to the action",
          "required": true,
          "content": {
            "application/json": {}
          }
        }
      },
      "post": {
        "tags": [
          "proxy"
        ],
        "description": "Proxy a POST request action",
        "operationId": "proxyPost",
        "responses": {
          "default": {
            "description": "The proxied response"
          }
        },
        "security": [
          {
            "app": [
              "email",
              "profile"
            ]
          },
          {}
        ],
        "requestBody": {
          "description": "The data that was passed to the action",
          "required": true,
          "content": {
            "application/json": {}
          }
        }
      },
      "put": {
        "tags": [
          "proxy"
        ],
        "description": "Proxy a PUT request action",
        "operationId": "proxyPut",
        "responses": {
          "default": {
            "description": "The proxied response"
          }
        },
        "security": [
          {
            "app": [
              "email",
              "profile"
            ]
          },
          {}
        ],
        "requestBody": {
          "description": "The data that was passed to the action",
          "required": true,
          "content": {
            "application/json": {}
          }
        }
      }
    },
    "/api/apps/{appId}/resources/{resourceType}/{resourceId}/history": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appId"
        },
        {
          "$ref": "#/components/parameters/resourceType"
        },
        {
          "$ref": "#/components/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "resource"
        ],
        "description": "Get the known history of a resource",
        "operationId": "getResourceHistory",
        "responses": {
          "200": {
            "description": "The resource that matches the given id.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/responses/resource"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "studio": []
          }
        ]
      }
    },
    "/api/apps/{appId}/resources/{resourceType}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appId"
        },
        {
          "$ref": "#/components/parameters/resourceType"
        }
      ],
      "get": {
        "tags": [
          "resource"
        ],
        "description": "Get all resources of this app.",
        "operationId": "queryResources",
        "parameters": [
          {
            "$ref": "#/components/parameters/view"
          },
          {
            "$ref": "#/components/parameters/$filter"
          },
          {
            "$ref": "#/components/parameters/$orderby"
          },
          {
            "$ref": "#/components/parameters/$select"
          },
          {
            "$ref": "#/components/parameters/$top"
          },
          {
            "$ref": "#/components/parameters/$team"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of all this appâ€™s resources of this type.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Resource"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "studio": []
          },
          {
            "app": [
              "resources:manage"
            ]
          },
          {
            "cli": [
              "resources:read"
            ]
          },
          {}
        ]
      },
      "post": {
        "tags": [
          "resource"
        ],
        "description": "Create a new resource for this app.",
        "operationId": "createResource",
        "requestBody": {
          "required": true,
          "description": "The resource to create",
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Resource"
                  },
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Resource"
                    }
                  }
                ]
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "resource"
                ],
                "description": "A `multipart/form-data` representation of a resource.",
                "additionalProperties": false,
                "properties": {
                  "resource": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Resource"
                    }
                  },
                  "assets": {
                    "type": "array",
                    "description": "A list of assets that should be linked to the resource.",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              }
            },
            "text/csv": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The resource that was created.",
            "$ref": "#/components/responses/resource"
          }
        },
        "security": [
          {
            "studio": []
          },
          {
            "app": [
              "resources:manage"
            ]
          },
          {
            "cli": [
              "resources:write"
            ]
          },
          {}
        ]
      },
      "put": {
        "tags": [
          "resource"
        ],
        "description": "Update existing app resources.",
        "operationId": "updateResources",
        "requestBody": {
          "required": true,
          "description": "The resources to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Resource"
                }
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "resource"
                ],
                "description": "A `multipart/form-data` representation of a resource.",
                "additionalProperties": false,
                "properties": {
                  "resource": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Resource"
                    }
                  },
                  "assets": {
                    "type": "array",
                    "description": "A list of assets that should be linked to the resources.",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              }
            },
            "text/csv": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated resources.",
            "$ref": "#/components/responses/resource"
          }
        },
        "security": [
          {
            "studio": []
          },
          {
            "app": [
              "resources:manage"
            ]
          },
          {
            "cli": [
              "resources:write"
            ]
          },
          {}
        ]
      },
      "delete": {
        "tags": [
          "resource"
        ],
        "description": "Delete multiple app resources.",
        "operationId": "deleteResources",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "An array of resource IDs to remove.",
                "items": {
                  "$ref": "#/components/schemas/Resource/properties/id"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The app resources have been deleted successfully."
          }
        },
        "security": [
          {
            "studio": []
          },
          {
            "app": [
              "resources:manage"
            ]
          },
          {
            "cli": [
              "resources:write"
            ]
          },
          {}
        ]
      }
    },
    "/api/apps/{appId}/resources/{resourceType}/\\$count": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appId"
        },
        {
          "$ref": "#/components/parameters/resourceType"
        }
      ],
      "get": {
        "tags": [
          "resource"
        ],
        "description": "Get a count of all resources of this app.",
        "operationId": "countResources",
        "parameters": [
          {
            "$ref": "#/components/parameters/$filter"
          },
          {
            "$ref": "#/components/parameters/$team"
          }
        ],
        "responses": {
          "200": {
            "description": "The count of all this appâ€™s resources of this type.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "security": [
          {
            "studio": []
          },
          {
            "app": [
              "resources:manage"
            ]
          },
          {
            "cli": [
              "resources:read"
            ]
          },
          {}
        ]
      }
    },
    "/api/apps/{appId}/resources/{resourceType}/subscriptions": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appId"
        },
        {
          "$ref": "#/components/parameters/resourceType"
        },
        {
          "$ref": "#/components/parameters/endpoint"
        }
      ],
      "get": {
        "tags": [
          "resource"
        ],
        "description": "Get the current subscription status of this resource.",
        "operationId": "getResourceTypeSubscription",
        "responses": {
          "200": {
            "description": "The subscription status for this resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceSubscription"
                }
              }
            }
          }
        },
        "security": [
          {
            "studio": []
          },
          {
            "app": [
              "openid"
            ]
          },
          {}
        ]
      }
    },
    "/api/apps/{appId}/resources/{resourceType}/{resourceId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appId"
        },
        {
          "$ref": "#/components/parameters/resourceType"
        },
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/view"
        }
      ],
      "get": {
        "tags": [
          "resource"
        ],
        "description": "Get a single app resource.",
        "operationId": "getResourceById",
        "responses": {
          "200": {
            "description": "The resource that matches the given id.",
            "$ref": "#/components/responses/resource"
          }
        },
        "security": [
          {
            "studio": []
          },
          {
            "app": [
              "resources:manage"
            ]
          },
          {
            "cli": [
              "resources:read"
            ]
          },
          {}
        ]
      },
      "put": {
        "tags": [
          "resource"
        ],
        "description": "Update an existing app resource.",
        "operationId": "updateResource",
        "requestBody": {
          "required": true,
          "$ref": "#/components/requestBodies/resource"
        },
        "responses": {
          "200": {
            "description": "The updated resource.",
            "$ref": "#/components/responses/resource"
          }
        },
        "security": [
          {
            "studio": []
          },
          {
            "app": [
              "resources:manage"
            ]
          },
          {
            "cli": [
              "resources:write"
            ]
          },
          {}
        ]
      },
      "delete": {
        "tags": [
          "resource"
        ],
        "description": "Delete an existing app resource.",
        "operationId": "deleteResource",
        "responses": {
          "204": {
            "description": "The app resource has been deleted successfully.",
            "$ref": "#/components/responses/resource"
          }
        },
        "security": [
          {
            "studio": []
          },
          {
            "app": [
              "resources:manage"
            ]
          },
          {
            "cli": [
              "resources:write"
            ]
          },
          {}
        ]
      }
    },
    "/api/apps/{appId}/resources/{resourceType}/{resourceId}/subscriptions": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appId"
        },
        {
          "$ref": "#/components/parameters/resourceType"
        },
        {
          "$ref": "#/components/parameters/resourceId"
        },
        {
          "$ref": "#/components/parameters/endpoint"
        }
      ],
      "get": {
        "tags": [
          "resource"
        ],
        "description": "Get the subscription status of a resource.",
        "operationId": "getResourceSubscription",
        "responses": {
          "200": {
            "description": "The subscription status of the resource that matches the given id.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number"
                    },
                    "update": {
                      "type": "boolean"
                    },
                    "delete": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/apps/{appId}/saml/{appSamlSecretId}/authn": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appId"
        },
        {
          "$ref": "#/components/parameters/appSamlSecretId"
        }
      ],
      "post": {
        "tags": [
          "secret"
        ],
        "operationId": "createAuthnRequest",
        "security": [
          {
            "studio": []
          },
          {}
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "redirectUri": {
                    "type": "string"
                  },
                  "scope": {
                    "type": "string"
                  },
                  "state": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "A list of the SAML secrets for the app.",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/apps/{appId}/saml/{appSamlSecretId}/acs": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appId"
        },
        {
          "$ref": "#/components/parameters/appSamlSecretId"
        }
      ],
      "post": {
        "tags": [
          "secret"
        ],
        "operationId": "assertConsumerService",
        "security": [
          {
            "studio": []
          },
          {}
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "RelayState": {
                    "type": "string"
                  },
                  "SAMLResponse": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "302": {
            "description": "A list of the SAML secrets for the app.",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/apps/{appId}/saml/{appSamlSecretId}/metadata.xml": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appId"
        },
        {
          "$ref": "#/components/parameters/appSamlSecretId"
        }
      ],
      "get": {
        "tags": [
          "secret"
        ],
        "operationId": "getEntityId",
        "responses": {
          "200": {
            "description": "Get the SAML entity ID metadata",
            "content": {
              "application/xml": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/saml/continue": {
      "post": {
        "tags": [
          "saml"
        ],
        "operationId": "continueSamlLogin",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Continue SAML login in case of an email conflict",
            "content": {
              "application/jso": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "redirect": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "studio": []
          },
          {}
        ]
      }
    },
    "/api/templates": {
      "get": {
        "tags": [
          "template"
        ],
        "description": "Fetch a list of all available templates.",
        "operationId": "getAppTemplates",
        "responses": {
          "200": {
            "description": "The list of all available templates.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "template": {
                        "type": "string",
                        "description": "The name of the template."
                      },
                      "description": {
                        "type": "string",
                        "description": "The description of the template."
                      },
                      "resources": {
                        "type": "boolean",
                        "description": "Whether this template supports pre-made resources"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "studio": []
          }
        ]
      },
      "post": {
        "tags": [
          "template"
        ],
        "description": "Register a new app using a template.",
        "operationId": "createTemplateApp",
        "requestBody": {
          "description": "The template to use for app creation.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "templateId",
                  "organizationId"
                ],
                "properties": {
                  "templateId": {
                    "type": "number",
                    "description": "The ID of the template."
                  },
                  "name": {
                    "$ref": "#/components/schemas/AppDefinition/properties/name"
                  },
                  "description": {
                    "$ref": "#/components/schemas/AppDefinition/properties/description"
                  },
                  "organizationId": {
                    "$ref": "#/components/schemas/Organization/properties/id"
                  },
                  "resources": {
                    "type": "boolean",
                    "description": "Include example resources."
                  },
                  "visibility": {
                    "$ref": "#/components/schemas/App/properties/visibility"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/app"
          }
        },
        "security": [
          {
            "studio": []
          }
        ]
      }
    },
    "/api/apps/{appId}/messages": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appId"
        },
        {
          "name": "merge",
          "in": "query",
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "get": {
        "tags": [
          "language"
        ],
        "description": "Get a list of all languages with messages.",
        "operationId": "getLanguages",
        "responses": {
          "200": {
            "description": "The list of supported languages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "language"
        ],
        "description": "Upload messages for the given language.",
        "operationId": "createMessages",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppMessages"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The translation was created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppMessages"
                }
              }
            }
          }
        },
        "security": [
          {
            "studio": []
          },
          {
            "cli": [
              "apps:write"
            ]
          }
        ]
      }
    },
    "/api/apps/{appId}/messages/{language}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appId"
        },
        {
          "$ref": "#/components/parameters/language"
        },
        {
          "in": "query",
          "name": "merge",
          "description": "Whether the languageâ€™s messages should be merged with its base language.",
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "override",
          "description": "Whether the appâ€™s language overrides should be included and merged.",
          "schema": {
            "type": "string",
            "default": "true"
          }
        }
      ],
      "get": {
        "tags": [
          "language"
        ],
        "description": "Get the appâ€™s messages for this language.",
        "operationId": "getMessages",
        "responses": {
          "200": {
            "description": "The app messages for the selected language.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppMessages"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "language"
        ],
        "description": "Delete the appâ€™s messages for this language.",
        "operationId": "deleteMessages",
        "responses": {
          "204": {
            "description": "The messages have successfully been deleted."
          }
        },
        "security": [
          {
            "studio": []
          }
        ]
      }
    },
    "/api/login": {
      "post": {
        "tags": [
          "user"
        ],
        "description": "Login using the Appsemble studio.",
        "operationId": "emailLogin",
        "responses": {
          "200": {
            "description": "Logged in successfully."
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/api/user/apps": {
      "get": {
        "tags": [
          "app"
        ],
        "parameters": [
          {
            "name": "language",
            "schema": {
              "type": "string"
            },
            "description": "The language to include the translations of, if available",
            "in": "query"
          }
        ],
        "description": "Get all apps that are editable by the user.",
        "operationId": "queryMyApps",
        "responses": {
          "200": {
            "description": "The list of all editable apps.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/App"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "studio": []
          }
        ]
      }
    },
    "/api/refresh": {
      "post": {
        "tags": [
          "user"
        ],
        "description": "Refresh an access token using the Appsemble studio",
        "operationId": "refreshToken",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "refresh_token"
                ],
                "properties": {
                  "refresh_token": {
                    "type": "string",
                    "description": "The refresh token to use for refreshing the session."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The token has been refreshed successfully."
          }
        }
      }
    },
    "/api/user": {
      "get": {
        "tags": [
          "user"
        ],
        "description": "Fetch the logged in user's profile.",
        "operationId": "getUser",
        "responses": {
          "200": {
            "description": "The user's profile.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "security": [
          {
            "studio": []
          }
        ]
      },
      "put": {
        "tags": [
          "user"
        ],
        "description": "Update the logged in user's profile.",
        "operationId": "updateUser",
        "requestBody": {
          "required": true,
          "$ref": "#/components/requestBodies/user"
        },
        "responses": {
          "200": {
            "description": "The user's profile.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "security": [
          {
            "studio": []
          }
        ]
      }
    },
    "/api/user/organizations": {
      "get": {
        "tags": [
          "template"
        ],
        "description": "Fetch the logged in user's organizations.",
        "operationId": "getUserOrganizations",
        "responses": {
          "200": {
            "description": "The organizations the logged in user is a member of.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "$ref": "#/components/schemas/Organization/properties/id"
                      },
                      "name": {
                        "$ref": "#/components/schemas/Organization/properties/name"
                      },
                      "role": {
                        "$ref": "#/components/schemas/Member/properties/role"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "studio": []
          }
        ]
      }
    },
    "/api/user/email": {
      "get": {
        "tags": [
          "user"
        ],
        "description": "List email addresses registered to logged in user's account.",
        "operationId": "listEmails",
        "responses": {
          "200": {
            "description": "The email address has been added successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserEmail"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "studio": []
          }
        ]
      },
      "post": {
        "tags": [
          "user"
        ],
        "description": "Register a new email to logged in user's account.",
        "operationId": "addEmail",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserEmail"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The email address has been added successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserEmail"
                }
              }
            }
          }
        },
        "security": [
          {
            "studio": []
          }
        ]
      },
      "delete": {
        "tags": [
          "user"
        ],
        "description": "Remove an existing email to logged in user's account.",
        "operationId": "removeEmail",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserEmail"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The email address has been removed successfully."
          }
        },
        "security": [
          {
            "studio": []
          }
        ]
      }
    },
    "/api/user/apps/accounts": {
      "get": {
        "description": "Get the accounts that have been linked to an app and the user",
        "tags": [
          "user"
        ],
        "operationId": "getAppAccounts",
        "security": [
          {
            "studio": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of linked accounts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppAccount"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/user/apps/{appId}/account": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appId"
        }
      ],
      "get": {
        "description": "Get a single account that has been linked to an app and the current user",
        "tags": [
          "user"
        ],
        "operationId": "getAppAccount",
        "security": [
          {
            "studio": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of linked accounts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppAccount"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "appMember"
        ],
        "description": "Register a new app account using an email address and a password.",
        "operationId": "registerMemberEmail",
        "requestBody": {
          "description": "The user account to register.",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "password": {
                    "type": "string",
                    "minLength": 8
                  },
                  "picture": {
                    "type": "string",
                    "format": "binary",
                    "description": "The accountâ€™s profile picture."
                  },
                  "properties": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "The memberâ€™s custom properties."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The account that was created."
          }
        }
      },
      "patch": {
        "description": "Update user data for a specific app",
        "tags": [
          "user"
        ],
        "operationId": "patchAppAccount",
        "security": [
          {
            "studio": []
          },
          {
            "app": []
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "name": {
                    "type": "string"
                  },
                  "picture": {
                    "type": "string",
                    "format": "binary",
                    "description": "The memberâ€™s profile picture."
                  },
                  "properties": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "The memberâ€™s custom properties."
                  },
                  "locale": {
                    "type": "string",
                    "description": "The preferred locale of the user."
                  }
                }
              },
              "encoding": {
                "picture": {
                  "contentType": "image/png,image/jpeg,image/tiff,image/webp"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A linked app account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppAccount"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/apps/{appId}/account/verify": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appId"
        }
      ],
      "post": {
        "tags": [
          "appMember"
        ],
        "description": "Verify the email address of a registered user.",
        "operationId": "verifyMemberEmail",
        "requestBody": {
          "description": "The user account to register.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "token"
                ],
                "properties": {
                  "token": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The account was successfully verified."
          }
        }
      }
    },
    "/api/user/apps/{appId}/account/resend": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appId"
        }
      ],
      "post": {
        "tags": [
          "appMember"
        ],
        "description": "Resend the verification code for a registered email.",
        "operationId": "resendMemberEmailVerification",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The verification email was sent if an account was found in the database."
          }
        },
        "security": [
          {
            "studio": []
          },
          {
            "app": [
              "email"
            ]
          }
        ]
      }
    },
    "/api/user/apps/{appId}/account/reset/request": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appId"
        }
      ],
      "post": {
        "tags": [
          "appMember"
        ],
        "description": "Request a reset token for resetting passwords.",
        "operationId": "requestMemberResetPassword",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The request has been received and an email was sent if it exists."
          }
        }
      }
    },
    "/api/user/apps/{appId}/account/reset": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appId"
        }
      ],
      "post": {
        "tags": [
          "appMember"
        ],
        "description": "Reset a password using a password reset token.",
        "operationId": "resetMemberPassword",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "password",
                  "token"
                ],
                "properties": {
                  "password": {
                    "type": "string",
                    "minLength": 8
                  },
                  "token": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The password has been reset."
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "app",
      "description": "Operations related to the App definition"
    },
    {
      "name": "asset",
      "description": "Operations related to Assets"
    },
    {
      "name": "auth",
      "description": "Operations related to the Authentication"
    },
    {
      "name": "language",
      "description": "Operations related to App translations"
    },
    {
      "name": "organization",
      "description": "Operations related to organizations"
    },
    {
      "name": "app",
      "description": "Operations related to the Resources definition"
    },
    {
      "name": "user",
      "description": "Operations related to a user."
    }
  ]
}